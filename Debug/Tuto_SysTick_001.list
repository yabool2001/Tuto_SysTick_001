
Tuto_SysTick_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003680  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003844  08003844  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800384c  0800384c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  080038c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080038c4  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2fc  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0c  00000000  00000000  0002b394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002cea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c9f  00000000  00000000  0002dea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad59  00000000  00000000  00045b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096739  00000000  00000000  000508a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6fd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000206c  00000000  00000000  000e702c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003724 	.word	0x08003724

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003724 	.word	0x08003724

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fb66 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f818 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f8fa 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f8aa 	bl	80007a8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000654:	f000 f85a 	bl	800070c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_status = HAL_UART_Transmit ( &huart2 , hello , strlen ( (const char*) hello ) , UART_TX_TIMEOUT ) ;
 8000658:	4905      	ldr	r1, [pc, #20]	; (8000670 <main+0x30>)
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <main+0x34>)
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	2223      	movs	r2, #35	; 0x23
 8000660:	f001 fd86 	bl	8002170 <HAL_UART_Transmit>
 8000664:	0003      	movs	r3, r0
 8000666:	001a      	movs	r2, r3
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <main+0x38>)
 800066a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x2c>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	08003744 	.word	0x08003744
 8000674:	20000120 	.word	0x20000120
 8000678:	200001d2 	.word	0x200001d2

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b093      	sub	sp, #76	; 0x4c
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	2410      	movs	r4, #16
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	2338      	movs	r3, #56	; 0x38
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f002 fbd7 	bl	8002e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000692:	003b      	movs	r3, r7
 8000694:	0018      	movs	r0, r3
 8000696:	2310      	movs	r3, #16
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f002 fbd0 	bl	8002e40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fe45 	bl	8001334 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2202      	movs	r2, #2
 80006ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2240      	movs	r2, #64	; 0x40
 80006c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fe7d 	bl	80013cc <HAL_RCC_OscConfig>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006d6:	f000 f9c1 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	003b      	movs	r3, r7
 80006dc:	2207      	movs	r2, #7
 80006de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e0:	003b      	movs	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	003b      	movs	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f2:	003b      	movs	r3, r7
 80006f4:	2100      	movs	r1, #0
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 f982 	bl	8001a00 <HAL_RCC_ClockConfig>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000700:	f000 f9ac 	bl	8000a5c <Error_Handler>
  }
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b013      	add	sp, #76	; 0x4c
 800070a:	bd90      	pop	{r4, r7, pc}

0800070c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000712:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <MX_USART1_UART_Init+0x98>)
 8000714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000718:	22e1      	movs	r2, #225	; 0xe1
 800071a:	0252      	lsls	r2, r2, #9
 800071c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fcb4 	bl	80020c4 <HAL_UART_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 f97c 	bl	8000a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000766:	2100      	movs	r1, #0
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fa5f 	bl	8002c2c <HAL_UARTEx_SetTxFifoThreshold>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000772:	f000 f973 	bl	8000a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000778:	2100      	movs	r1, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f002 fa96 	bl	8002cac <HAL_UARTEx_SetRxFifoThreshold>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000784:	f000 f96a 	bl	8000a5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 800078a:	0018      	movs	r0, r3
 800078c:	f002 fa14 	bl	8002bb8 <HAL_UARTEx_DisableFifoMode>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f962 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	40013800 	.word	0x40013800

080007a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007ae:	4a24      	ldr	r2, [pc, #144]	; (8000840 <MX_USART2_UART_Init+0x98>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b2:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007b4:	22e1      	movs	r2, #225	; 0xe1
 80007b6:	0252      	lsls	r2, r2, #9
 80007b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_USART2_UART_Init+0x94>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fc66 	bl	80020c4 <HAL_UART_Init>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007fc:	f000 f92e 	bl	8000a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x94>)
 8000802:	2100      	movs	r1, #0
 8000804:	0018      	movs	r0, r3
 8000806:	f002 fa11 	bl	8002c2c <HAL_UARTEx_SetTxFifoThreshold>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800080e:	f000 f925 	bl	8000a5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_USART2_UART_Init+0x94>)
 8000814:	2100      	movs	r1, #0
 8000816:	0018      	movs	r0, r3
 8000818:	f002 fa48 	bl	8002cac <HAL_UARTEx_SetRxFifoThreshold>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000820:	f000 f91c 	bl	8000a5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x94>)
 8000826:	0018      	movs	r0, r3
 8000828:	f002 f9c6 	bl	8002bb8 <HAL_UARTEx_DisableFifoMode>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000830:	f000 f914 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	20000120 	.word	0x20000120
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	240c      	movs	r4, #12
 800084c:	193b      	adds	r3, r7, r4
 800084e:	0018      	movs	r0, r3
 8000850:	2314      	movs	r3, #20
 8000852:	001a      	movs	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f002 faf3 	bl	8002e40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <MX_GPIO_Init+0xd0>)
 800085c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000860:	2104      	movs	r1, #4
 8000862:	430a      	orrs	r2, r1
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086a:	2204      	movs	r2, #4
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000878:	2120      	movs	r1, #32
 800087a:	430a      	orrs	r2, r1
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000882:	2220      	movs	r2, #32
 8000884:	4013      	ands	r3, r2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_GPIO_Init+0xd0>)
 800088c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000890:	2101      	movs	r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_GPIO_Init+0xd0>)
 8000898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800089a:	2201      	movs	r2, #1
 800089c:	4013      	ands	r3, r2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 80008a2:	23a0      	movs	r3, #160	; 0xa0
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	2200      	movs	r2, #0
 80008a8:	2120      	movs	r1, #32
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fcfa 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	0192      	lsls	r2, r2, #6
 80008b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	22c4      	movs	r2, #196	; 0xc4
 80008bc:	0392      	lsls	r2, r2, #14
 80008be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_GPIO_Init+0xd4>)
 80008ca:	0019      	movs	r1, r3
 80008cc:	0010      	movs	r0, r2
 80008ce:	f000 fb85 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 80008d2:	0021      	movs	r1, r4
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2220      	movs	r2, #32
 80008d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2201      	movs	r2, #1
 80008de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2202      	movs	r2, #2
 80008ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 80008ec:	187a      	adds	r2, r7, r1
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 fb71 	bl	8000fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2007      	movs	r0, #7
 8000900:	f000 fb3a 	bl	8000f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000904:	2007      	movs	r0, #7
 8000906:	f000 fb4c 	bl	8000fa2 <HAL_NVIC_EnableIRQ>

}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b009      	add	sp, #36	; 0x24
 8000910:	bd90      	pop	{r4, r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	40021000 	.word	0x40021000
 8000918:	50000800 	.word	0x50000800

0800091c <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback ( uint16_t GPIO_Pin )
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	1dbb      	adds	r3, r7, #6
 8000926:	801a      	strh	r2, [r3, #0]
	c++ ;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8000932:	801a      	strh	r2, [r3, #0]
	if ( GPIO_Pin == BUTTON_Pin )
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	881a      	ldrh	r2, [r3, #0]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	019b      	lsls	r3, r3, #6
 800093c:	429a      	cmp	r2, r3
 800093e:	d12b      	bne.n	8000998 <HAL_GPIO_EXTI_Falling_Callback+0x7c>
	{
		sprintf ( (char *) tx_buff , "%s %u\n" , pressed , c ) ;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8000946:	4918      	ldr	r1, [pc, #96]	; (80009a8 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 800094a:	f002 fa81 	bl	8002e50 <siprintf>
		uart_status = HAL_UART_Transmit ( &huart1 , (uint8_t*) tx_buff , strlen ( (const char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff fbd7 	bl	8000104 <strlen>
 8000956:	0003      	movs	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	4914      	ldr	r1, [pc, #80]	; (80009ac <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 800095c:	4814      	ldr	r0, [pc, #80]	; (80009b0 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 800095e:	2364      	movs	r3, #100	; 0x64
 8000960:	f001 fc06 	bl	8002170 <HAL_UART_Transmit>
 8000964:	0003      	movs	r3, r0
 8000966:	001a      	movs	r2, r3
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_GPIO_EXTI_Falling_Callback+0x98>)
 800096a:	701a      	strb	r2, [r3, #0]
		uart_status = HAL_UART_Transmit ( &huart2 , (uint8_t*) tx_buff , strlen ( (const char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff fbc8 	bl	8000104 <strlen>
 8000974:	0003      	movs	r3, r0
 8000976:	b29a      	uxth	r2, r3
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 800097a:	480f      	ldr	r0, [pc, #60]	; (80009b8 <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	f001 fbf7 	bl	8002170 <HAL_UART_Transmit>
 8000982:	0003      	movs	r3, r0
 8000984:	001a      	movs	r2, r3
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_GPIO_EXTI_Falling_Callback+0x98>)
 8000988:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_SET ) ;
 800098a:	23a0      	movs	r3, #160	; 0xa0
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	2201      	movs	r2, #1
 8000990:	2120      	movs	r1, #32
 8000992:	0018      	movs	r0, r3
 8000994:	f000 fc86 	bl	80012a4 <HAL_GPIO_WritePin>
	}
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200001d4 	.word	0x200001d4
 80009a4:	08003768 	.word	0x08003768
 80009a8:	0800373c 	.word	0x0800373c
 80009ac:	200001b4 	.word	0x200001b4
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	200001d2 	.word	0x200001d2
 80009b8:	20000120 	.word	0x20000120

080009bc <HAL_GPIO_EXTI_Rising_Callback>:
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	0002      	movs	r2, r0
 80009c4:	1dbb      	adds	r3, r7, #6
 80009c6:	801a      	strh	r2, [r3, #0]
	c++ ;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 80009d2:	801a      	strh	r2, [r3, #0]
	if ( GPIO_Pin == BUTTON_Pin )
 80009d4:	1dbb      	adds	r3, r7, #6
 80009d6:	881a      	ldrh	r2, [r3, #0]
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	019b      	lsls	r3, r3, #6
 80009dc:	429a      	cmp	r2, r3
 80009de:	d12b      	bne.n	8000a38 <HAL_GPIO_EXTI_Rising_Callback+0x7c>
	{
		sprintf ( (char *) tx_buff , "%s %u\n" , released , c ) ;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 80009e6:	4918      	ldr	r1, [pc, #96]	; (8000a48 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 80009e8:	4818      	ldr	r0, [pc, #96]	; (8000a4c <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 80009ea:	f002 fa31 	bl	8002e50 <siprintf>
		uart_status = HAL_UART_Transmit ( &huart1 , (uint8_t*) tx_buff , strlen ( (const char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff fb87 	bl	8000104 <strlen>
 80009f6:	0003      	movs	r3, r0
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4914      	ldr	r1, [pc, #80]	; (8000a4c <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 80009fc:	4814      	ldr	r0, [pc, #80]	; (8000a50 <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 80009fe:	2364      	movs	r3, #100	; 0x64
 8000a00:	f001 fbb6 	bl	8002170 <HAL_UART_Transmit>
 8000a04:	0003      	movs	r3, r0
 8000a06:	001a      	movs	r2, r3
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_GPIO_EXTI_Rising_Callback+0x98>)
 8000a0a:	701a      	strb	r2, [r3, #0]
		uart_status = HAL_UART_Transmit ( &huart2 , (uint8_t*) tx_buff , strlen ( (const char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fb78 	bl	8000104 <strlen>
 8000a14:	0003      	movs	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8000a1a:	480f      	ldr	r0, [pc, #60]	; (8000a58 <HAL_GPIO_EXTI_Rising_Callback+0x9c>)
 8000a1c:	2364      	movs	r3, #100	; 0x64
 8000a1e:	f001 fba7 	bl	8002170 <HAL_UART_Transmit>
 8000a22:	0003      	movs	r3, r0
 8000a24:	001a      	movs	r2, r3
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_GPIO_EXTI_Rising_Callback+0x98>)
 8000a28:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin ( GREEN_GPIO_Port , GREEN_Pin , GPIO_PIN_RESET ) ;
 8000a2a:	23a0      	movs	r3, #160	; 0xa0
 8000a2c:	05db      	lsls	r3, r3, #23
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2120      	movs	r1, #32
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fc36 	bl	80012a4 <HAL_GPIO_WritePin>
	}
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200001d4 	.word	0x200001d4
 8000a44:	08003778 	.word	0x08003778
 8000a48:	0800373c 	.word	0x0800373c
 8000a4c:	200001b4 	.word	0x200001b4
 8000a50:	2000008c 	.word	0x2000008c
 8000a54:	200001d2 	.word	0x200001d2
 8000a58:	20000120 	.word	0x20000120

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x44>)
 8000a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_MspInit+0x44>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	641a      	str	r2, [r3, #64]	; 0x40
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_MspInit+0x44>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x44>)
 8000a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_MspInit+0x44>)
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	0549      	lsls	r1, r1, #21
 8000a90:	430a      	orrs	r2, r1
 8000a92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_MspInit+0x44>)
 8000a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	055b      	lsls	r3, r3, #21
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b099      	sub	sp, #100	; 0x64
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	234c      	movs	r3, #76	; 0x4c
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	0018      	movs	r0, r3
 8000abe:	2314      	movs	r3, #20
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f002 f9bc 	bl	8002e40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac8:	2418      	movs	r4, #24
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	0018      	movs	r0, r3
 8000ace:	2334      	movs	r3, #52	; 0x34
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f002 f9b4 	bl	8002e40 <memset>
  if(huart->Instance==USART1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a45      	ldr	r2, [pc, #276]	; (8000bf4 <HAL_UART_MspInit+0x144>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d13e      	bne.n	8000b60 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 f92f 	bl	8001d54 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d001      	beq.n	8000afe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000afa:	f7ff ffaf 	bl	8000a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b02:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	01c9      	lsls	r1, r1, #7
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	01db      	lsls	r3, r3, #7
 8000b14:	4013      	ands	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b1e:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b20:	2104      	movs	r1, #4
 8000b22:	430a      	orrs	r2, r1
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b32:	214c      	movs	r1, #76	; 0x4c
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2230      	movs	r2, #48	; 0x30
 8000b38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2201      	movs	r2, #1
 8000b50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	4a29      	ldr	r2, [pc, #164]	; (8000bfc <HAL_UART_MspInit+0x14c>)
 8000b56:	0019      	movs	r1, r3
 8000b58:	0010      	movs	r0, r2
 8000b5a:	f000 fa3f 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5e:	e044      	b.n	8000bea <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <HAL_UART_MspInit+0x150>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d13f      	bne.n	8000bea <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b6a:	2118      	movs	r1, #24
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2202      	movs	r2, #2
 8000b70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 f8ea 	bl	8001d54 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000b84:	f7ff ff6a 	bl	8000a5c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	0289      	lsls	r1, r1, #10
 8000b92:	430a      	orrs	r2, r1
 8000b94:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	029b      	lsls	r3, r3, #10
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_STLK_Pin|USART2_RX_STLK_Pin;
 8000bbc:	214c      	movs	r1, #76	; 0x4c
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	220c      	movs	r2, #12
 8000bc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2201      	movs	r2, #1
 8000bce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2201      	movs	r2, #1
 8000bda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	187a      	adds	r2, r7, r1
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 f9f9 	bl	8000fdc <HAL_GPIO_Init>
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b019      	add	sp, #100	; 0x64
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000800 	.word	0x50000800
 8000c00:	40004400 	.word	0x40004400

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f8de 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 fb50 	bl	80012e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f002 f8b8 	bl	8002dec <__errno>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	425b      	negs	r3, r3
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	18d2      	adds	r2, r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <_sbrk+0x64>)
 8000c98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b006      	add	sp, #24
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20009000 	.word	0x20009000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	200001d8 	.word	0x200001d8
 8000cb0:	200001f0 	.word	0x200001f0

08000cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc4:	f7ff fff6 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <LoopForever+0xe>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	; (8000d0c <LoopForever+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cee:	f002 f883 	bl	8002df8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cf2:	f7ff fca5 	bl	8000640 <main>

08000cf6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
  ldr   r0, =_estack
 8000cf8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d04:	08003854 	.word	0x08003854
  ldr r2, =_sbss
 8000d08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d0c:	200001f0 	.word	0x200001f0

08000d10 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_COMP_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x3c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_Init+0x3c>)
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	0049      	lsls	r1, r1, #1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 f810 	bl	8000d54 <HAL_InitTick>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e001      	b.n	8000d44 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fe92 	bl	8000a68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40022000 	.word	0x40022000

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_InitTick+0x88>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d02b      	beq.n	8000dc4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_InitTick+0x8c>)
 8000d6e:	681c      	ldr	r4, [r3, #0]
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_InitTick+0x88>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	0019      	movs	r1, r3
 8000d76:	23fa      	movs	r3, #250	; 0xfa
 8000d78:	0098      	lsls	r0, r3, #2
 8000d7a:	f7ff f9d5 	bl	8000128 <__udivsi3>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	0019      	movs	r1, r3
 8000d82:	0020      	movs	r0, r4
 8000d84:	f7ff f9d0 	bl	8000128 <__udivsi3>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 f919 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d112      	bne.n	8000dba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d80a      	bhi.n	8000db0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	425b      	negs	r3, r3
 8000da0:	2200      	movs	r2, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 f8e8 	bl	8000f78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_InitTick+0x90>)
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e00d      	b.n	8000dcc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e008      	b.n	8000dcc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dba:	230f      	movs	r3, #15
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e003      	b.n	8000dcc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b005      	add	sp, #20
 8000dd8:	bd90      	pop	{r4, r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_IncTick+0x1c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	001a      	movs	r2, r3
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x20>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	18d2      	adds	r2, r2, r3
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_IncTick+0x20>)
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	20000008 	.word	0x20000008
 8000e08:	200001dc 	.word	0x200001dc

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b02      	ldr	r3, [pc, #8]	; (8000e1c <HAL_GetTick+0x10>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	200001dc 	.word	0x200001dc

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	0002      	movs	r2, r0
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b7f      	cmp	r3, #127	; 0x7f
 8000e32:	d809      	bhi.n	8000e48 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	001a      	movs	r2, r3
 8000e3a:	231f      	movs	r3, #31
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_EnableIRQ+0x30>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	4091      	lsls	r1, r2
 8000e44:	000a      	movs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b7f      	cmp	r3, #127	; 0x7f
 8000e68:	d828      	bhi.n	8000ebc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e6a:	4a2f      	ldr	r2, [pc, #188]	; (8000f28 <__NVIC_SetPriority+0xd4>)
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	33c0      	adds	r3, #192	; 0xc0
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	589b      	ldr	r3, [r3, r2]
 8000e7a:	1dfa      	adds	r2, r7, #7
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	0011      	movs	r1, r2
 8000e80:	2203      	movs	r2, #3
 8000e82:	400a      	ands	r2, r1
 8000e84:	00d2      	lsls	r2, r2, #3
 8000e86:	21ff      	movs	r1, #255	; 0xff
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	000a      	movs	r2, r1
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	401a      	ands	r2, r3
 8000e90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	22ff      	movs	r2, #255	; 0xff
 8000e98:	401a      	ands	r2, r3
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	4003      	ands	r3, r0
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea8:	481f      	ldr	r0, [pc, #124]	; (8000f28 <__NVIC_SetPriority+0xd4>)
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	33c0      	adds	r3, #192	; 0xc0
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eba:	e031      	b.n	8000f20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <__NVIC_SetPriority+0xd8>)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	3b08      	subs	r3, #8
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3306      	adds	r3, #6
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	1dfa      	adds	r2, r7, #7
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	0011      	movs	r1, r2
 8000edc:	2203      	movs	r2, #3
 8000ede:	400a      	ands	r2, r1
 8000ee0:	00d2      	lsls	r2, r2, #3
 8000ee2:	21ff      	movs	r1, #255	; 0xff
 8000ee4:	4091      	lsls	r1, r2
 8000ee6:	000a      	movs	r2, r1
 8000ee8:	43d2      	mvns	r2, r2
 8000eea:	401a      	ands	r2, r3
 8000eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	019b      	lsls	r3, r3, #6
 8000ef2:	22ff      	movs	r2, #255	; 0xff
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	0018      	movs	r0, r3
 8000efc:	2303      	movs	r3, #3
 8000efe:	4003      	ands	r3, r0
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <__NVIC_SetPriority+0xd8>)
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	001c      	movs	r4, r3
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	4023      	ands	r3, r4
 8000f10:	3b08      	subs	r3, #8
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	430a      	orrs	r2, r1
 8000f16:	3306      	adds	r3, #6
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	18c3      	adds	r3, r0, r3
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b003      	add	sp, #12
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	045b      	lsls	r3, r3, #17
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d301      	bcc.n	8000f48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f44:	2301      	movs	r3, #1
 8000f46:	e010      	b.n	8000f6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <SysTick_Config+0x44>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	3a01      	subs	r2, #1
 8000f4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f50:	2301      	movs	r3, #1
 8000f52:	425b      	negs	r3, r3
 8000f54:	2103      	movs	r1, #3
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff ff7c 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x44>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x44>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	210f      	movs	r1, #15
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	1c02      	adds	r2, r0, #0
 8000f88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ff5d 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b004      	add	sp, #16
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	0002      	movs	r2, r0
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ff33 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff ffaf 	bl	8000f30 <SysTick_Config>
 8000fd2:	0003      	movs	r3, r0
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e147      	b.n	800127c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4091      	lsls	r1, r2
 8000ff6:	000a      	movs	r2, r1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d100      	bne.n	8001004 <HAL_GPIO_Init+0x28>
 8001002:	e138      	b.n	8001276 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2203      	movs	r2, #3
 800100a:	4013      	ands	r3, r2
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2203      	movs	r2, #3
 8001016:	4013      	ands	r3, r2
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	409a      	lsls	r2, r3
 800102a:	0013      	movs	r3, r2
 800102c:	43da      	mvns	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	409a      	lsls	r2, r3
 800103e:	0013      	movs	r3, r2
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	2201      	movs	r2, #1
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2203      	movs	r2, #3
 8001084:	4013      	ands	r3, r2
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	43da      	mvns	r2, r3
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2203      	movs	r2, #3
 80010c0:	4013      	ands	r3, r2
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	58d3      	ldr	r3, [r2, r3]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2207      	movs	r2, #7
 80010d8:	4013      	ands	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2107      	movs	r1, #7
 80010f2:	400b      	ands	r3, r1
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	0092      	lsls	r2, r2, #2
 800110a:	6939      	ldr	r1, [r7, #16]
 800110c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	43da      	mvns	r2, r3
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2203      	movs	r2, #3
 800112c:	401a      	ands	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	23c0      	movs	r3, #192	; 0xc0
 8001148:	029b      	lsls	r3, r3, #10
 800114a:	4013      	ands	r3, r2
 800114c:	d100      	bne.n	8001150 <HAL_GPIO_Init+0x174>
 800114e:	e092      	b.n	8001276 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001150:	4a50      	ldr	r2, [pc, #320]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3318      	adds	r3, #24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	589b      	ldr	r3, [r3, r2]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2203      	movs	r2, #3
 8001162:	4013      	ands	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	220f      	movs	r2, #15
 8001168:	409a      	lsls	r2, r3
 800116a:	0013      	movs	r3, r2
 800116c:	43da      	mvns	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	23a0      	movs	r3, #160	; 0xa0
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	429a      	cmp	r2, r3
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x1ca>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a45      	ldr	r2, [pc, #276]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x1c6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a44      	ldr	r2, [pc, #272]	; (800129c <HAL_GPIO_Init+0x2c0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x1c2>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a43      	ldr	r2, [pc, #268]	; (80012a0 <HAL_GPIO_Init+0x2c4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x1be>
 8001196:	2303      	movs	r3, #3
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x1cc>
 800119a:	2305      	movs	r3, #5
 800119c:	e004      	b.n	80011a8 <HAL_GPIO_Init+0x1cc>
 800119e:	2302      	movs	r3, #2
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_Init+0x1cc>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e000      	b.n	80011a8 <HAL_GPIO_Init+0x1cc>
 80011a6:	2300      	movs	r3, #0
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	2103      	movs	r1, #3
 80011ac:	400a      	ands	r2, r1
 80011ae:	00d2      	lsls	r2, r2, #3
 80011b0:	4093      	lsls	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011b8:	4936      	ldr	r1, [pc, #216]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3318      	adds	r3, #24
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	035b      	lsls	r3, r3, #13
 80011de:	4013      	ands	r3, r2
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43da      	mvns	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	039b      	lsls	r3, r3, #14
 8001208:	4013      	ands	r3, r2
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 800121c:	2384      	movs	r3, #132	; 0x84
 800121e:	58d3      	ldr	r3, [r2, r3]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43da      	mvns	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	029b      	lsls	r3, r3, #10
 8001234:	4013      	ands	r3, r2
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001240:	4914      	ldr	r1, [pc, #80]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 8001242:	2284      	movs	r2, #132	; 0x84
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	58d3      	ldr	r3, [r2, r3]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	4013      	ands	r3, r2
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800126e:	4909      	ldr	r1, [pc, #36]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	40da      	lsrs	r2, r3
 8001284:	1e13      	subs	r3, r2, #0
 8001286:	d000      	beq.n	800128a <HAL_GPIO_Init+0x2ae>
 8001288:	e6b0      	b.n	8000fec <HAL_GPIO_Init+0x10>
  }
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b006      	add	sp, #24
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021800 	.word	0x40021800
 8001298:	50000400 	.word	0x50000400
 800129c:	50000800 	.word	0x50000800
 80012a0:	50000c00 	.word	0x50000c00

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	0008      	movs	r0, r1
 80012ae:	0011      	movs	r1, r2
 80012b0:	1cbb      	adds	r3, r7, #2
 80012b2:	1c02      	adds	r2, r0, #0
 80012b4:	801a      	strh	r2, [r3, #0]
 80012b6:	1c7b      	adds	r3, r7, #1
 80012b8:	1c0a      	adds	r2, r1, #0
 80012ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012bc:	1c7b      	adds	r3, r7, #1
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c4:	1cbb      	adds	r3, r7, #2
 80012c6:	881a      	ldrh	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ce:	1cbb      	adds	r3, r7, #2
 80012d0:	881a      	ldrh	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	0002      	movs	r2, r0
 80012e8:	1dbb      	adds	r3, r7, #6
 80012ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	1dba      	adds	r2, r7, #6
 80012f2:	8812      	ldrh	r2, [r2, #0]
 80012f4:	4013      	ands	r3, r2
 80012f6:	d008      	beq.n	800130a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80012fa:	1dba      	adds	r2, r7, #6
 80012fc:	8812      	ldrh	r2, [r2, #0]
 80012fe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001300:	1dbb      	adds	r3, r7, #6
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff fb59 	bl	80009bc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	1dba      	adds	r2, r7, #6
 8001310:	8812      	ldrh	r2, [r2, #0]
 8001312:	4013      	ands	r3, r2
 8001314:	d008      	beq.n	8001328 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001318:	1dba      	adds	r2, r7, #6
 800131a:	8812      	ldrh	r2, [r2, #0]
 800131c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800131e:	1dbb      	adds	r3, r7, #6
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff fafa 	bl	800091c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021800 	.word	0x40021800

08001334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001342:	4013      	ands	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	429a      	cmp	r2, r3
 8001356:	d11f      	bne.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	0013      	movs	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	189b      	adds	r3, r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4912      	ldr	r1, [pc, #72]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001366:	0018      	movs	r0, r3
 8001368:	f7fe fede 	bl	8000128 <__udivsi3>
 800136c:	0003      	movs	r3, r0
 800136e:	3301      	adds	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001372:	e008      	b.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3b01      	subs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e001      	b.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e009      	b.n	800139a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001388:	695a      	ldr	r2, [r3, #20]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	401a      	ands	r2, r3
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	429a      	cmp	r2, r3
 8001396:	d0ed      	beq.n	8001374 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	0018      	movs	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	40007000 	.word	0x40007000
 80013a8:	fffff9ff 	.word	0xfffff9ff
 80013ac:	20000000 	.word	0x20000000
 80013b0:	000f4240 	.word	0x000f4240

080013b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	23e0      	movs	r3, #224	; 0xe0
 80013be:	01db      	lsls	r3, r3, #7
 80013c0:	4013      	ands	r3, r2
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e2fe      	b.n	80019dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2201      	movs	r2, #1
 80013e4:	4013      	ands	r3, r2
 80013e6:	d100      	bne.n	80013ea <HAL_RCC_OscConfig+0x1e>
 80013e8:	e07c      	b.n	80014e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ea:	4bc3      	ldr	r3, [pc, #780]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2238      	movs	r2, #56	; 0x38
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013f4:	4bc0      	ldr	r3, [pc, #768]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2203      	movs	r2, #3
 80013fa:	4013      	ands	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b10      	cmp	r3, #16
 8001402:	d102      	bne.n	800140a <HAL_RCC_OscConfig+0x3e>
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d002      	beq.n	8001410 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b08      	cmp	r3, #8
 800140e:	d10b      	bne.n	8001428 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	4bb9      	ldr	r3, [pc, #740]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	029b      	lsls	r3, r3, #10
 8001418:	4013      	ands	r3, r2
 800141a:	d062      	beq.n	80014e2 <HAL_RCC_OscConfig+0x116>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d15e      	bne.n	80014e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e2d9      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	025b      	lsls	r3, r3, #9
 8001430:	429a      	cmp	r2, r3
 8001432:	d107      	bne.n	8001444 <HAL_RCC_OscConfig+0x78>
 8001434:	4bb0      	ldr	r3, [pc, #704]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4baf      	ldr	r3, [pc, #700]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	0249      	lsls	r1, r1, #9
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e020      	b.n	8001486 <HAL_RCC_OscConfig+0xba>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	23a0      	movs	r3, #160	; 0xa0
 800144a:	02db      	lsls	r3, r3, #11
 800144c:	429a      	cmp	r2, r3
 800144e:	d10e      	bne.n	800146e <HAL_RCC_OscConfig+0xa2>
 8001450:	4ba9      	ldr	r3, [pc, #676]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4ba8      	ldr	r3, [pc, #672]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	02c9      	lsls	r1, r1, #11
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	4ba6      	ldr	r3, [pc, #664]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4ba5      	ldr	r3, [pc, #660]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	0249      	lsls	r1, r1, #9
 8001468:	430a      	orrs	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e00b      	b.n	8001486 <HAL_RCC_OscConfig+0xba>
 800146e:	4ba2      	ldr	r3, [pc, #648]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4ba1      	ldr	r3, [pc, #644]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001474:	49a1      	ldr	r1, [pc, #644]	; (80016fc <HAL_RCC_OscConfig+0x330>)
 8001476:	400a      	ands	r2, r1
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	4b9f      	ldr	r3, [pc, #636]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b9e      	ldr	r3, [pc, #632]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001480:	499f      	ldr	r1, [pc, #636]	; (8001700 <HAL_RCC_OscConfig+0x334>)
 8001482:	400a      	ands	r2, r1
 8001484:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d014      	beq.n	80014b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff fcbd 	bl	8000e0c <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fcb8 	bl	8000e0c <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e298      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014aa:	4b93      	ldr	r3, [pc, #588]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	029b      	lsls	r3, r3, #10
 80014b2:	4013      	ands	r3, r2
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0xcc>
 80014b6:	e015      	b.n	80014e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fca8 	bl	8000e0c <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c2:	f7ff fca3 	bl	8000e0c <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b64      	cmp	r3, #100	; 0x64
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e283      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d4:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	029b      	lsls	r3, r3, #10
 80014dc:	4013      	ands	r3, r2
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0xf6>
 80014e0:	e000      	b.n	80014e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d100      	bne.n	80014f0 <HAL_RCC_OscConfig+0x124>
 80014ee:	e099      	b.n	8001624 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f0:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2238      	movs	r2, #56	; 0x38
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014fa:	4b7f      	ldr	r3, [pc, #508]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2203      	movs	r2, #3
 8001500:	4013      	ands	r3, r2
 8001502:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b10      	cmp	r3, #16
 8001508:	d102      	bne.n	8001510 <HAL_RCC_OscConfig+0x144>
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d002      	beq.n	8001516 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d135      	bne.n	8001582 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001516:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4013      	ands	r3, r2
 8001520:	d005      	beq.n	800152e <HAL_RCC_OscConfig+0x162>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e256      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	4b72      	ldr	r3, [pc, #456]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4a74      	ldr	r2, [pc, #464]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001534:	4013      	ands	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	021a      	lsls	r2, r3, #8
 800153e:	4b6e      	ldr	r3, [pc, #440]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001540:	430a      	orrs	r2, r1
 8001542:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d112      	bne.n	8001570 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800154a:	4b6b      	ldr	r3, [pc, #428]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6e      	ldr	r2, [pc, #440]	; (8001708 <HAL_RCC_OscConfig+0x33c>)
 8001550:	4013      	ands	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	4b67      	ldr	r3, [pc, #412]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800155e:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0adb      	lsrs	r3, r3, #11
 8001564:	2207      	movs	r2, #7
 8001566:	4013      	ands	r3, r2
 8001568:	4a68      	ldr	r2, [pc, #416]	; (800170c <HAL_RCC_OscConfig+0x340>)
 800156a:	40da      	lsrs	r2, r3
 800156c:	4b68      	ldr	r3, [pc, #416]	; (8001710 <HAL_RCC_OscConfig+0x344>)
 800156e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001570:	4b68      	ldr	r3, [pc, #416]	; (8001714 <HAL_RCC_OscConfig+0x348>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff fbed 	bl	8000d54 <HAL_InitTick>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d051      	beq.n	8001622 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e22c      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d030      	beq.n	80015ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800158a:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a5e      	ldr	r2, [pc, #376]	; (8001708 <HAL_RCC_OscConfig+0x33c>)
 8001590:	4013      	ands	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 800159a:	430a      	orrs	r2, r1
 800159c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	0049      	lsls	r1, r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fc2e 	bl	8000e0c <HAL_GetTick>
 80015b0:	0003      	movs	r3, r0
 80015b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc29 	bl	8000e0c <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e209      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d4:	4b48      	ldr	r3, [pc, #288]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a4a      	ldr	r2, [pc, #296]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80015da:	4013      	ands	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	021a      	lsls	r2, r3, #8
 80015e4:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80015e6:	430a      	orrs	r2, r1
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	e01b      	b.n	8001624 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015ec:	4b42      	ldr	r3, [pc, #264]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	4949      	ldr	r1, [pc, #292]	; (8001718 <HAL_RCC_OscConfig+0x34c>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc08 	bl	8000e0c <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fc03 	bl	8000e0c <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e1e3      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001614:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4013      	ands	r3, r2
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x236>
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001622:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2208      	movs	r2, #8
 800162a:	4013      	ands	r3, r2
 800162c:	d047      	beq.n	80016be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2238      	movs	r2, #56	; 0x38
 8001634:	4013      	ands	r3, r2
 8001636:	2b18      	cmp	r3, #24
 8001638:	d10a      	bne.n	8001650 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800163a:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	2202      	movs	r2, #2
 8001640:	4013      	ands	r3, r2
 8001642:	d03c      	beq.n	80016be <HAL_RCC_OscConfig+0x2f2>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d138      	bne.n	80016be <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e1c5      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d019      	beq.n	800168c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 800165a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 800165e:	2101      	movs	r1, #1
 8001660:	430a      	orrs	r2, r1
 8001662:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fbd2 	bl	8000e0c <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fbcd 	bl	8000e0c <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e1ad      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d0f1      	beq.n	800166e <HAL_RCC_OscConfig+0x2a2>
 800168a:	e018      	b.n	80016be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 800168e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 8001692:	2101      	movs	r1, #1
 8001694:	438a      	bics	r2, r1
 8001696:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fbb8 	bl	8000e0c <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff fbb3 	bl	8000e0c <HAL_GetTick>
 80016a6:	0002      	movs	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e193      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b8:	2202      	movs	r2, #2
 80016ba:	4013      	ands	r3, r2
 80016bc:	d1f1      	bne.n	80016a2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2204      	movs	r2, #4
 80016c4:	4013      	ands	r3, r2
 80016c6:	d100      	bne.n	80016ca <HAL_RCC_OscConfig+0x2fe>
 80016c8:	e0c6      	b.n	8001858 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ca:	231f      	movs	r3, #31
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2238      	movs	r2, #56	; 0x38
 80016d8:	4013      	ands	r3, r2
 80016da:	2b20      	cmp	r3, #32
 80016dc:	d11e      	bne.n	800171c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_RCC_OscConfig+0x32c>)
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	2202      	movs	r2, #2
 80016e4:	4013      	ands	r3, r2
 80016e6:	d100      	bne.n	80016ea <HAL_RCC_OscConfig+0x31e>
 80016e8:	e0b6      	b.n	8001858 <HAL_RCC_OscConfig+0x48c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d000      	beq.n	80016f4 <HAL_RCC_OscConfig+0x328>
 80016f2:	e0b1      	b.n	8001858 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e171      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
 80016f8:	40021000 	.word	0x40021000
 80016fc:	fffeffff 	.word	0xfffeffff
 8001700:	fffbffff 	.word	0xfffbffff
 8001704:	ffff80ff 	.word	0xffff80ff
 8001708:	ffffc7ff 	.word	0xffffc7ff
 800170c:	00f42400 	.word	0x00f42400
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004
 8001718:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800171c:	4bb1      	ldr	r3, [pc, #708]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 800171e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	055b      	lsls	r3, r3, #21
 8001724:	4013      	ands	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x360>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x362>
 800172c:	2300      	movs	r3, #0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d011      	beq.n	8001756 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4bac      	ldr	r3, [pc, #688]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 8001734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001736:	4bab      	ldr	r3, [pc, #684]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	0549      	lsls	r1, r1, #21
 800173c:	430a      	orrs	r2, r1
 800173e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001740:	4ba8      	ldr	r3, [pc, #672]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 8001742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	055b      	lsls	r3, r3, #21
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800174e:	231f      	movs	r3, #31
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	4ba4      	ldr	r3, [pc, #656]	; (80019e8 <HAL_RCC_OscConfig+0x61c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4013      	ands	r3, r2
 8001760:	d11a      	bne.n	8001798 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001762:	4ba1      	ldr	r3, [pc, #644]	; (80019e8 <HAL_RCC_OscConfig+0x61c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4ba0      	ldr	r3, [pc, #640]	; (80019e8 <HAL_RCC_OscConfig+0x61c>)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	0049      	lsls	r1, r1, #1
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001770:	f7ff fb4c 	bl	8000e0c <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7ff fb47 	bl	8000e0c <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e127      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178c:	4b96      	ldr	r3, [pc, #600]	; (80019e8 <HAL_RCC_OscConfig+0x61c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4013      	ands	r3, r2
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x3e2>
 80017a0:	4b90      	ldr	r3, [pc, #576]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80017a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017a4:	4b8f      	ldr	r3, [pc, #572]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	430a      	orrs	r2, r1
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ac:	e01c      	b.n	80017e8 <HAL_RCC_OscConfig+0x41c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x404>
 80017b6:	4b8b      	ldr	r3, [pc, #556]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80017b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ba:	4b8a      	ldr	r3, [pc, #552]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80017bc:	2104      	movs	r1, #4
 80017be:	430a      	orrs	r2, r1
 80017c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80017c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017c6:	4b87      	ldr	r3, [pc, #540]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0x41c>
 80017d0:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80017d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017d4:	4b83      	ldr	r3, [pc, #524]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	438a      	bics	r2, r1
 80017da:	65da      	str	r2, [r3, #92]	; 0x5c
 80017dc:	4b81      	ldr	r3, [pc, #516]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80017de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017e0:	4b80      	ldr	r3, [pc, #512]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80017e2:	2104      	movs	r1, #4
 80017e4:	438a      	bics	r2, r1
 80017e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d014      	beq.n	800181a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb0c 	bl	8000e0c <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f8:	e009      	b.n	800180e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff fb07 	bl	8000e0c <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	4a79      	ldr	r2, [pc, #484]	; (80019ec <HAL_RCC_OscConfig+0x620>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0e6      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180e:	4b75      	ldr	r3, [pc, #468]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 8001810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x42e>
 8001818:	e013      	b.n	8001842 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff faf7 	bl	8000e0c <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001822:	e009      	b.n	8001838 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff faf2 	bl	8000e0c <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	4a6f      	ldr	r2, [pc, #444]	; (80019ec <HAL_RCC_OscConfig+0x620>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0d1      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	2202      	movs	r2, #2
 800183e:	4013      	ands	r3, r2
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001842:	231f      	movs	r3, #31
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 800184e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001850:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 8001852:	4967      	ldr	r1, [pc, #412]	; (80019f0 <HAL_RCC_OscConfig+0x624>)
 8001854:	400a      	ands	r2, r1
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d100      	bne.n	8001862 <HAL_RCC_OscConfig+0x496>
 8001860:	e0bb      	b.n	80019da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001862:	4b60      	ldr	r3, [pc, #384]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2238      	movs	r2, #56	; 0x38
 8001868:	4013      	ands	r3, r2
 800186a:	2b10      	cmp	r3, #16
 800186c:	d100      	bne.n	8001870 <HAL_RCC_OscConfig+0x4a4>
 800186e:	e07b      	b.n	8001968 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d156      	bne.n	8001926 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001878:	4b5a      	ldr	r3, [pc, #360]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 800187e:	495d      	ldr	r1, [pc, #372]	; (80019f4 <HAL_RCC_OscConfig+0x628>)
 8001880:	400a      	ands	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fac2 	bl	8000e0c <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff fabd 	bl	8000e0c <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e09d      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	049b      	lsls	r3, r3, #18
 80018a8:	4013      	ands	r3, r2
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ac:	4b4d      	ldr	r3, [pc, #308]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4a51      	ldr	r2, [pc, #324]	; (80019f8 <HAL_RCC_OscConfig+0x62c>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d8:	431a      	orrs	r2, r3
 80018da:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e0:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	0449      	lsls	r1, r1, #17
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018ee:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	4b3c      	ldr	r3, [pc, #240]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	0549      	lsls	r1, r1, #21
 80018f8:	430a      	orrs	r2, r1
 80018fa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fa86 	bl	8000e0c <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff fa81 	bl	8000e0c <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e061      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001918:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	049b      	lsls	r3, r3, #18
 8001920:	4013      	ands	r3, r2
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x53a>
 8001924:	e059      	b.n	80019da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 800192c:	4931      	ldr	r1, [pc, #196]	; (80019f4 <HAL_RCC_OscConfig+0x628>)
 800192e:	400a      	ands	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff fa6b 	bl	8000e0c <HAL_GetTick>
 8001936:	0003      	movs	r3, r0
 8001938:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff fa66 	bl	8000e0c <HAL_GetTick>
 8001940:	0002      	movs	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e046      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	049b      	lsls	r3, r3, #18
 8001956:	4013      	ands	r3, r2
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 8001960:	4926      	ldr	r1, [pc, #152]	; (80019fc <HAL_RCC_OscConfig+0x630>)
 8001962:	400a      	ands	r2, r1
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	e038      	b.n	80019da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e033      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_RCC_OscConfig+0x618>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2203      	movs	r2, #3
 800197e:	401a      	ands	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	429a      	cmp	r2, r3
 8001986:	d126      	bne.n	80019d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2270      	movs	r2, #112	; 0x70
 800198c:	401a      	ands	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d11f      	bne.n	80019d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	23fe      	movs	r3, #254	; 0xfe
 800199a:	01db      	lsls	r3, r3, #7
 800199c:	401a      	ands	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d116      	bne.n	80019d6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	23f8      	movs	r3, #248	; 0xf8
 80019ac:	039b      	lsls	r3, r3, #14
 80019ae:	401a      	ands	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d10e      	bne.n	80019d6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	23e0      	movs	r3, #224	; 0xe0
 80019bc:	051b      	lsls	r3, r3, #20
 80019be:	401a      	ands	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	0f5b      	lsrs	r3, r3, #29
 80019cc:	075a      	lsls	r2, r3, #29
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	b008      	add	sp, #32
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40007000 	.word	0x40007000
 80019ec:	00001388 	.word	0x00001388
 80019f0:	efffffff 	.word	0xefffffff
 80019f4:	feffffff 	.word	0xfeffffff
 80019f8:	11c1808c 	.word	0x11c1808c
 80019fc:	eefefffc 	.word	0xeefefffc

08001a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0e9      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2207      	movs	r2, #7
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d91e      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2207      	movs	r2, #7
 8001a28:	4393      	bics	r3, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	4b70      	ldr	r3, [pc, #448]	; (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a34:	f7ff f9ea 	bl	8000e0c <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a3c:	e009      	b.n	8001a52 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3e:	f7ff f9e5 	bl	8000e0c <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	4a6a      	ldr	r2, [pc, #424]	; (8001bf4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e0ca      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a52:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2207      	movs	r2, #7
 8001a58:	4013      	ands	r3, r2
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1ee      	bne.n	8001a3e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2202      	movs	r2, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d015      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4013      	ands	r3, r2
 8001a72:	d006      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a74:	4b60      	ldr	r3, [pc, #384]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a7a:	21e0      	movs	r1, #224	; 0xe0
 8001a7c:	01c9      	lsls	r1, r1, #7
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a82:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4a5d      	ldr	r2, [pc, #372]	; (8001bfc <HAL_RCC_ClockConfig+0x1fc>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a92:	430a      	orrs	r2, r1
 8001a94:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d057      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	029b      	lsls	r3, r3, #10
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d12b      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e097      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac0:	4b4d      	ldr	r3, [pc, #308]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	049b      	lsls	r3, r3, #18
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d11f      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e08b      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad8:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d113      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e07f      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af0:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af4:	2202      	movs	r2, #2
 8001af6:	4013      	ands	r3, r2
 8001af8:	d108      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e074      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e06d      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2207      	movs	r2, #7
 8001b12:	4393      	bics	r3, r2
 8001b14:	0019      	movs	r1, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b20:	f7ff f974 	bl	8000e0c <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b28:	e009      	b.n	8001b3e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2a:	f7ff f96f 	bl	8000e0c <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	4a2f      	ldr	r2, [pc, #188]	; (8001bf4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e054      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2238      	movs	r2, #56	; 0x38
 8001b44:	401a      	ands	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d1ec      	bne.n	8001b2a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2207      	movs	r2, #7
 8001b56:	4013      	ands	r3, r2
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d21e      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2207      	movs	r2, #7
 8001b64:	4393      	bics	r3, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b70:	f7ff f94c 	bl	8000e0c <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b78:	e009      	b.n	8001b8e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7a:	f7ff f947 	bl	8000e0c <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e02c      	b.n	8001be8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2207      	movs	r2, #7
 8001b94:	4013      	ands	r3, r2
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1ee      	bne.n	8001b7a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d009      	beq.n	8001bba <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <HAL_RCC_ClockConfig+0x200>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bba:	f000 f829 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bbe:	0001      	movs	r1, r0
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	401a      	ands	r2, r3
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_RCC_ClockConfig+0x204>)
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	58d3      	ldr	r3, [r2, r3]
 8001bd0:	221f      	movs	r2, #31
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	000a      	movs	r2, r1
 8001bd6:	40da      	lsrs	r2, r3
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_ClockConfig+0x208>)
 8001bda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_ClockConfig+0x20c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff f8b7 	bl	8000d54 <HAL_InitTick>
 8001be6:	0003      	movs	r3, r0
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	00001388 	.word	0x00001388
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	fffff0ff 	.word	0xfffff0ff
 8001c00:	ffff8fff 	.word	0xffff8fff
 8001c04:	08003788 	.word	0x08003788
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c16:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2238      	movs	r2, #56	; 0x38
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d10f      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c20:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0adb      	lsrs	r3, r3, #11
 8001c26:	2207      	movs	r2, #7
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	0013      	movs	r3, r2
 8001c30:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	4835      	ldr	r0, [pc, #212]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c36:	f7fe fa77 	bl	8000128 <__udivsi3>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e05d      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2238      	movs	r2, #56	; 0x38
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d102      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c4c:	4b30      	ldr	r3, [pc, #192]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	e054      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2238      	movs	r2, #56	; 0x38
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d138      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2203      	movs	r2, #3
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	2207      	movs	r2, #7
 8001c70:	4013      	ands	r3, r2
 8001c72:	3301      	adds	r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d10d      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	4824      	ldr	r0, [pc, #144]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c80:	f7fe fa52 	bl	8000128 <__udivsi3>
 8001c84:	0003      	movs	r3, r0
 8001c86:	0019      	movs	r1, r3
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	227f      	movs	r2, #127	; 0x7f
 8001c90:	4013      	ands	r3, r2
 8001c92:	434b      	muls	r3, r1
 8001c94:	617b      	str	r3, [r7, #20]
        break;
 8001c96:	e00d      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	481c      	ldr	r0, [pc, #112]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c9c:	f7fe fa44 	bl	8000128 <__udivsi3>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	227f      	movs	r2, #127	; 0x7f
 8001cac:	4013      	ands	r3, r2
 8001cae:	434b      	muls	r3, r1
 8001cb0:	617b      	str	r3, [r7, #20]
        break;
 8001cb2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0f5b      	lsrs	r3, r3, #29
 8001cba:	2207      	movs	r2, #7
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	6978      	ldr	r0, [r7, #20]
 8001cc6:	f7fe fa2f 	bl	8000128 <__udivsi3>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	e015      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2238      	movs	r2, #56	; 0x38
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d103      	bne.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2238      	movs	r2, #56	; 0x38
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b18      	cmp	r3, #24
 8001cee:	d103      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cf0:	23fa      	movs	r3, #250	; 0xfa
 8001cf2:	01db      	lsls	r3, r3, #7
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	e001      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cfc:	693b      	ldr	r3, [r7, #16]
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b006      	add	sp, #24
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	007a1200 	.word	0x007a1200

08001d14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d2c:	f7ff fff2 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d30:	0004      	movs	r4, r0
 8001d32:	f7ff fb3f 	bl	80013b4 <LL_RCC_GetAPB1Prescaler>
 8001d36:	0003      	movs	r3, r0
 8001d38:	0b1a      	lsrs	r2, r3, #12
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	58d3      	ldr	r3, [r2, r3]
 8001d40:	221f      	movs	r2, #31
 8001d42:	4013      	ands	r3, r2
 8001d44:	40dc      	lsrs	r4, r3
 8001d46:	0023      	movs	r3, r4
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	080037c8 	.word	0x080037c8

08001d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d5c:	2313      	movs	r3, #19
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d64:	2312      	movs	r3, #18
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	4013      	ands	r3, r2
 8001d76:	d100      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d78:	e0a3      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2011      	movs	r0, #17
 8001d7c:	183b      	adds	r3, r7, r0
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	4bc3      	ldr	r3, [pc, #780]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	055b      	lsls	r3, r3, #21
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d110      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4bc0      	ldr	r3, [pc, #768]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d92:	4bbf      	ldr	r3, [pc, #764]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0549      	lsls	r1, r1, #21
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d9c:	4bbc      	ldr	r3, [pc, #752]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	055b      	lsls	r3, r3, #21
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db0:	4bb8      	ldr	r3, [pc, #736]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4bb7      	ldr	r3, [pc, #732]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0049      	lsls	r1, r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dbe:	f7ff f825 	bl	8000e0c <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc8:	f7ff f820 	bl	8000e0c <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d904      	bls.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001dd6:	2313      	movs	r3, #19
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2203      	movs	r2, #3
 8001ddc:	701a      	strb	r2, [r3, #0]
        break;
 8001dde:	e005      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001de0:	4bac      	ldr	r3, [pc, #688]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	d0ed      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001dec:	2313      	movs	r3, #19
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d154      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001df6:	4ba6      	ldr	r3, [pc, #664]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001df8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dfa:	23c0      	movs	r3, #192	; 0xc0
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d019      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d014      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e12:	4b9f      	ldr	r3, [pc, #636]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	4aa0      	ldr	r2, [pc, #640]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e1c:	4b9c      	ldr	r3, [pc, #624]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e20:	4b9b      	ldr	r3, [pc, #620]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	0249      	lsls	r1, r1, #9
 8001e26:	430a      	orrs	r2, r1
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e2a:	4b99      	ldr	r3, [pc, #612]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e2e:	4b98      	ldr	r3, [pc, #608]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e30:	499a      	ldr	r1, [pc, #616]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e36:	4b96      	ldr	r3, [pc, #600]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	d016      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7fe ffe2 	bl	8000e0c <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4c:	e00c      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7fe ffdd 	bl	8000e0c <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	4a91      	ldr	r2, [pc, #580]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d904      	bls.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e5e:	2313      	movs	r3, #19
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2203      	movs	r2, #3
 8001e64:	701a      	strb	r2, [r3, #0]
            break;
 8001e66:	e004      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e68:	4b89      	ldr	r3, [pc, #548]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d0ed      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e72:	2313      	movs	r3, #19
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e7c:	4b84      	ldr	r3, [pc, #528]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	4a85      	ldr	r2, [pc, #532]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8a:	4b81      	ldr	r3, [pc, #516]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e90:	e00c      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e92:	2312      	movs	r3, #18
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2213      	movs	r2, #19
 8001e98:	18ba      	adds	r2, r7, r2
 8001e9a:	7812      	ldrb	r2, [r2, #0]
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e005      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea0:	2312      	movs	r3, #18
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2213      	movs	r2, #19
 8001ea6:	18ba      	adds	r2, r7, r2
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eac:	2311      	movs	r3, #17
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d105      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	4b76      	ldr	r3, [pc, #472]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eba:	4b75      	ldr	r3, [pc, #468]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ebc:	4979      	ldr	r1, [pc, #484]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ecc:	4b70      	ldr	r3, [pc, #448]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d009      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eea:	4b69      	ldr	r3, [pc, #420]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	220c      	movs	r2, #12
 8001ef0:	4393      	bics	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4b65      	ldr	r3, [pc, #404]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2210      	movs	r2, #16
 8001f04:	4013      	ands	r3, r2
 8001f06:	d009      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f08:	4b61      	ldr	r3, [pc, #388]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	4a66      	ldr	r2, [pc, #408]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	4b5e      	ldr	r3, [pc, #376]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	d009      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f28:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	4a5f      	ldr	r2, [pc, #380]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	4b56      	ldr	r3, [pc, #344]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4013      	ands	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f48:	4b51      	ldr	r3, [pc, #324]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4c:	4a58      	ldr	r2, [pc, #352]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2220      	movs	r2, #32
 8001f62:	4013      	ands	r3, r2
 8001f64:	d009      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f66:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	01db      	lsls	r3, r3, #7
 8001f82:	4013      	ands	r3, r2
 8001f84:	d015      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f86:	4b42      	ldr	r3, [pc, #264]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	0899      	lsrs	r1, r3, #2
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1a      	ldr	r2, [r3, #32]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	05db      	lsls	r3, r3, #23
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001faa:	2180      	movs	r1, #128	; 0x80
 8001fac:	0249      	lsls	r1, r1, #9
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	031b      	lsls	r3, r3, #12
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fbe:	4b34      	ldr	r3, [pc, #208]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fcc:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	039b      	lsls	r3, r3, #14
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d016      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fde:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	4a35      	ldr	r2, [pc, #212]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	03db      	lsls	r3, r3, #15
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d106      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002004:	2180      	movs	r1, #128	; 0x80
 8002006:	0449      	lsls	r1, r1, #17
 8002008:	430a      	orrs	r2, r1
 800200a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	03db      	lsls	r3, r3, #15
 8002014:	4013      	ands	r3, r2
 8002016:	d016      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002028:	430a      	orrs	r2, r1
 800202a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	045b      	lsls	r3, r3, #17
 8002034:	429a      	cmp	r2, r3
 8002036:	d106      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	0449      	lsls	r1, r1, #17
 8002042:	430a      	orrs	r2, r1
 8002044:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	4013      	ands	r3, r2
 8002050:	d016      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002058:	4013      	ands	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002062:	430a      	orrs	r2, r1
 8002064:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	01db      	lsls	r3, r3, #7
 800206e:	429a      	cmp	r2, r3
 8002070:	d106      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	0249      	lsls	r1, r1, #9
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002080:	2312      	movs	r3, #18
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	781b      	ldrb	r3, [r3, #0]
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b006      	add	sp, #24
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	fffffcff 	.word	0xfffffcff
 800209c:	fffeffff 	.word	0xfffeffff
 80020a0:	00001388 	.word	0x00001388
 80020a4:	efffffff 	.word	0xefffffff
 80020a8:	fffff3ff 	.word	0xfffff3ff
 80020ac:	fff3ffff 	.word	0xfff3ffff
 80020b0:	ffcfffff 	.word	0xffcfffff
 80020b4:	ffffcfff 	.word	0xffffcfff
 80020b8:	ffbfffff 	.word	0xffbfffff
 80020bc:	feffffff 	.word	0xfeffffff
 80020c0:	ffff3fff 	.word	0xffff3fff

080020c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e046      	b.n	8002164 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2288      	movs	r2, #136	; 0x88
 80020da:	589b      	ldr	r3, [r3, r2]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2284      	movs	r2, #132	; 0x84
 80020e4:	2100      	movs	r1, #0
 80020e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7fe fce0 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2288      	movs	r2, #136	; 0x88
 80020f4:	2124      	movs	r1, #36	; 0x24
 80020f6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2101      	movs	r1, #1
 8002104:	438a      	bics	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f8cc 	bl	80022a8 <UART_SetConfig>
 8002110:	0003      	movs	r3, r0
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e024      	b.n	8002164 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	0018      	movs	r0, r3
 8002126:	f000 fb7d 	bl	8002824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	490d      	ldr	r1, [pc, #52]	; (800216c <HAL_UART_Init+0xa8>)
 8002136:	400a      	ands	r2, r1
 8002138:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	212a      	movs	r1, #42	; 0x2a
 8002146:	438a      	bics	r2, r1
 8002148:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	0018      	movs	r0, r3
 800215e:	f000 fc15 	bl	800298c <UART_CheckIdleState>
 8002162:	0003      	movs	r3, r0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}
 800216c:	ffffb7ff 	.word	0xffffb7ff

08002170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	1dbb      	adds	r3, r7, #6
 800217e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2288      	movs	r2, #136	; 0x88
 8002184:	589b      	ldr	r3, [r3, r2]
 8002186:	2b20      	cmp	r3, #32
 8002188:	d000      	beq.n	800218c <HAL_UART_Transmit+0x1c>
 800218a:	e088      	b.n	800229e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_UART_Transmit+0x2a>
 8002192:	1dbb      	adds	r3, r7, #6
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e080      	b.n	80022a0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	015b      	lsls	r3, r3, #5
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d109      	bne.n	80021be <HAL_UART_Transmit+0x4e>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2201      	movs	r2, #1
 80021b6:	4013      	ands	r3, r2
 80021b8:	d001      	beq.n	80021be <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e070      	b.n	80022a0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2290      	movs	r2, #144	; 0x90
 80021c2:	2100      	movs	r1, #0
 80021c4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2288      	movs	r2, #136	; 0x88
 80021ca:	2121      	movs	r1, #33	; 0x21
 80021cc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ce:	f7fe fe1d 	bl	8000e0c <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1dba      	adds	r2, r7, #6
 80021da:	2154      	movs	r1, #84	; 0x54
 80021dc:	8812      	ldrh	r2, [r2, #0]
 80021de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1dba      	adds	r2, r7, #6
 80021e4:	2156      	movs	r1, #86	; 0x56
 80021e6:	8812      	ldrh	r2, [r2, #0]
 80021e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	015b      	lsls	r3, r3, #5
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d108      	bne.n	8002208 <HAL_UART_Transmit+0x98>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d104      	bne.n	8002208 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	e003      	b.n	8002210 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002210:	e02c      	b.n	800226c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	0013      	movs	r3, r2
 800221c:	2200      	movs	r2, #0
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	f000 fc02 	bl	8002a28 <UART_WaitOnFlagUntilTimeout>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d001      	beq.n	800222c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e039      	b.n	80022a0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10b      	bne.n	800224a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	001a      	movs	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	05d2      	lsls	r2, r2, #23
 800223e:	0dd2      	lsrs	r2, r2, #23
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	3302      	adds	r3, #2
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	e007      	b.n	800225a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3301      	adds	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2256      	movs	r2, #86	; 0x56
 800225e:	5a9b      	ldrh	r3, [r3, r2]
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b299      	uxth	r1, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2256      	movs	r2, #86	; 0x56
 800226a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2256      	movs	r2, #86	; 0x56
 8002270:	5a9b      	ldrh	r3, [r3, r2]
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1cc      	bne.n	8002212 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	0013      	movs	r3, r2
 8002282:	2200      	movs	r2, #0
 8002284:	2140      	movs	r1, #64	; 0x40
 8002286:	f000 fbcf 	bl	8002a28 <UART_WaitOnFlagUntilTimeout>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d001      	beq.n	8002292 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e006      	b.n	80022a0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2288      	movs	r2, #136	; 0x88
 8002296:	2120      	movs	r1, #32
 8002298:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
  }
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b008      	add	sp, #32
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b090      	sub	sp, #64	; 0x40
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022b0:	231a      	movs	r3, #26
 80022b2:	2220      	movs	r2, #32
 80022b4:	189b      	adds	r3, r3, r2
 80022b6:	19db      	adds	r3, r3, r7
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4aaf      	ldr	r2, [pc, #700]	; (8002598 <UART_SetConfig+0x2f0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e6:	430b      	orrs	r3, r1
 80022e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4aaa      	ldr	r2, [pc, #680]	; (800259c <UART_SetConfig+0x2f4>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0018      	movs	r0, r3
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	68d9      	ldr	r1, [r3, #12]
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	0003      	movs	r3, r0
 8002300:	430b      	orrs	r3, r1
 8002302:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4aa4      	ldr	r2, [pc, #656]	; (80025a0 <UART_SetConfig+0x2f8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d004      	beq.n	800231e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800231a:	4313      	orrs	r3, r2
 800231c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a9f      	ldr	r2, [pc, #636]	; (80025a4 <UART_SetConfig+0x2fc>)
 8002326:	4013      	ands	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002330:	430b      	orrs	r3, r1
 8002332:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	220f      	movs	r2, #15
 800233c:	4393      	bics	r3, r2
 800233e:	0018      	movs	r0, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	0003      	movs	r3, r0
 800234a:	430b      	orrs	r3, r1
 800234c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a95      	ldr	r2, [pc, #596]	; (80025a8 <UART_SetConfig+0x300>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d131      	bne.n	80023bc <UART_SetConfig+0x114>
 8002358:	4b94      	ldr	r3, [pc, #592]	; (80025ac <UART_SetConfig+0x304>)
 800235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235c:	2203      	movs	r2, #3
 800235e:	4013      	ands	r3, r2
 8002360:	2b03      	cmp	r3, #3
 8002362:	d01d      	beq.n	80023a0 <UART_SetConfig+0xf8>
 8002364:	d823      	bhi.n	80023ae <UART_SetConfig+0x106>
 8002366:	2b02      	cmp	r3, #2
 8002368:	d00c      	beq.n	8002384 <UART_SetConfig+0xdc>
 800236a:	d820      	bhi.n	80023ae <UART_SetConfig+0x106>
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <UART_SetConfig+0xce>
 8002370:	2b01      	cmp	r3, #1
 8002372:	d00e      	beq.n	8002392 <UART_SetConfig+0xea>
 8002374:	e01b      	b.n	80023ae <UART_SetConfig+0x106>
 8002376:	231b      	movs	r3, #27
 8002378:	2220      	movs	r2, #32
 800237a:	189b      	adds	r3, r3, r2
 800237c:	19db      	adds	r3, r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e0b4      	b.n	80024ee <UART_SetConfig+0x246>
 8002384:	231b      	movs	r3, #27
 8002386:	2220      	movs	r2, #32
 8002388:	189b      	adds	r3, r3, r2
 800238a:	19db      	adds	r3, r3, r7
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e0ad      	b.n	80024ee <UART_SetConfig+0x246>
 8002392:	231b      	movs	r3, #27
 8002394:	2220      	movs	r2, #32
 8002396:	189b      	adds	r3, r3, r2
 8002398:	19db      	adds	r3, r3, r7
 800239a:	2204      	movs	r2, #4
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e0a6      	b.n	80024ee <UART_SetConfig+0x246>
 80023a0:	231b      	movs	r3, #27
 80023a2:	2220      	movs	r2, #32
 80023a4:	189b      	adds	r3, r3, r2
 80023a6:	19db      	adds	r3, r3, r7
 80023a8:	2208      	movs	r2, #8
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e09f      	b.n	80024ee <UART_SetConfig+0x246>
 80023ae:	231b      	movs	r3, #27
 80023b0:	2220      	movs	r2, #32
 80023b2:	189b      	adds	r3, r3, r2
 80023b4:	19db      	adds	r3, r3, r7
 80023b6:	2210      	movs	r2, #16
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	e098      	b.n	80024ee <UART_SetConfig+0x246>
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a7b      	ldr	r2, [pc, #492]	; (80025b0 <UART_SetConfig+0x308>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d131      	bne.n	800242a <UART_SetConfig+0x182>
 80023c6:	4b79      	ldr	r3, [pc, #484]	; (80025ac <UART_SetConfig+0x304>)
 80023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ca:	220c      	movs	r2, #12
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d01d      	beq.n	800240e <UART_SetConfig+0x166>
 80023d2:	d823      	bhi.n	800241c <UART_SetConfig+0x174>
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d00c      	beq.n	80023f2 <UART_SetConfig+0x14a>
 80023d8:	d820      	bhi.n	800241c <UART_SetConfig+0x174>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <UART_SetConfig+0x13c>
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d00e      	beq.n	8002400 <UART_SetConfig+0x158>
 80023e2:	e01b      	b.n	800241c <UART_SetConfig+0x174>
 80023e4:	231b      	movs	r3, #27
 80023e6:	2220      	movs	r2, #32
 80023e8:	189b      	adds	r3, r3, r2
 80023ea:	19db      	adds	r3, r3, r7
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e07d      	b.n	80024ee <UART_SetConfig+0x246>
 80023f2:	231b      	movs	r3, #27
 80023f4:	2220      	movs	r2, #32
 80023f6:	189b      	adds	r3, r3, r2
 80023f8:	19db      	adds	r3, r3, r7
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e076      	b.n	80024ee <UART_SetConfig+0x246>
 8002400:	231b      	movs	r3, #27
 8002402:	2220      	movs	r2, #32
 8002404:	189b      	adds	r3, r3, r2
 8002406:	19db      	adds	r3, r3, r7
 8002408:	2204      	movs	r2, #4
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e06f      	b.n	80024ee <UART_SetConfig+0x246>
 800240e:	231b      	movs	r3, #27
 8002410:	2220      	movs	r2, #32
 8002412:	189b      	adds	r3, r3, r2
 8002414:	19db      	adds	r3, r3, r7
 8002416:	2208      	movs	r2, #8
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e068      	b.n	80024ee <UART_SetConfig+0x246>
 800241c:	231b      	movs	r3, #27
 800241e:	2220      	movs	r2, #32
 8002420:	189b      	adds	r3, r3, r2
 8002422:	19db      	adds	r3, r3, r7
 8002424:	2210      	movs	r2, #16
 8002426:	701a      	strb	r2, [r3, #0]
 8002428:	e061      	b.n	80024ee <UART_SetConfig+0x246>
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a61      	ldr	r2, [pc, #388]	; (80025b4 <UART_SetConfig+0x30c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d106      	bne.n	8002442 <UART_SetConfig+0x19a>
 8002434:	231b      	movs	r3, #27
 8002436:	2220      	movs	r2, #32
 8002438:	189b      	adds	r3, r3, r2
 800243a:	19db      	adds	r3, r3, r7
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e055      	b.n	80024ee <UART_SetConfig+0x246>
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a5c      	ldr	r2, [pc, #368]	; (80025b8 <UART_SetConfig+0x310>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d106      	bne.n	800245a <UART_SetConfig+0x1b2>
 800244c:	231b      	movs	r3, #27
 800244e:	2220      	movs	r2, #32
 8002450:	189b      	adds	r3, r3, r2
 8002452:	19db      	adds	r3, r3, r7
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e049      	b.n	80024ee <UART_SetConfig+0x246>
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a50      	ldr	r2, [pc, #320]	; (80025a0 <UART_SetConfig+0x2f8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d13e      	bne.n	80024e2 <UART_SetConfig+0x23a>
 8002464:	4b51      	ldr	r3, [pc, #324]	; (80025ac <UART_SetConfig+0x304>)
 8002466:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002468:	23c0      	movs	r3, #192	; 0xc0
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	4013      	ands	r3, r2
 800246e:	22c0      	movs	r2, #192	; 0xc0
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	4293      	cmp	r3, r2
 8002474:	d027      	beq.n	80024c6 <UART_SetConfig+0x21e>
 8002476:	22c0      	movs	r2, #192	; 0xc0
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	4293      	cmp	r3, r2
 800247c:	d82a      	bhi.n	80024d4 <UART_SetConfig+0x22c>
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	4293      	cmp	r3, r2
 8002484:	d011      	beq.n	80024aa <UART_SetConfig+0x202>
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	4293      	cmp	r3, r2
 800248c:	d822      	bhi.n	80024d4 <UART_SetConfig+0x22c>
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <UART_SetConfig+0x1f4>
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	00d2      	lsls	r2, r2, #3
 8002496:	4293      	cmp	r3, r2
 8002498:	d00e      	beq.n	80024b8 <UART_SetConfig+0x210>
 800249a:	e01b      	b.n	80024d4 <UART_SetConfig+0x22c>
 800249c:	231b      	movs	r3, #27
 800249e:	2220      	movs	r2, #32
 80024a0:	189b      	adds	r3, r3, r2
 80024a2:	19db      	adds	r3, r3, r7
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e021      	b.n	80024ee <UART_SetConfig+0x246>
 80024aa:	231b      	movs	r3, #27
 80024ac:	2220      	movs	r2, #32
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	19db      	adds	r3, r3, r7
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e01a      	b.n	80024ee <UART_SetConfig+0x246>
 80024b8:	231b      	movs	r3, #27
 80024ba:	2220      	movs	r2, #32
 80024bc:	189b      	adds	r3, r3, r2
 80024be:	19db      	adds	r3, r3, r7
 80024c0:	2204      	movs	r2, #4
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e013      	b.n	80024ee <UART_SetConfig+0x246>
 80024c6:	231b      	movs	r3, #27
 80024c8:	2220      	movs	r2, #32
 80024ca:	189b      	adds	r3, r3, r2
 80024cc:	19db      	adds	r3, r3, r7
 80024ce:	2208      	movs	r2, #8
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e00c      	b.n	80024ee <UART_SetConfig+0x246>
 80024d4:	231b      	movs	r3, #27
 80024d6:	2220      	movs	r2, #32
 80024d8:	189b      	adds	r3, r3, r2
 80024da:	19db      	adds	r3, r3, r7
 80024dc:	2210      	movs	r2, #16
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e005      	b.n	80024ee <UART_SetConfig+0x246>
 80024e2:	231b      	movs	r3, #27
 80024e4:	2220      	movs	r2, #32
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	19db      	adds	r3, r3, r7
 80024ea:	2210      	movs	r2, #16
 80024ec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <UART_SetConfig+0x2f8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d000      	beq.n	80024fa <UART_SetConfig+0x252>
 80024f8:	e0a9      	b.n	800264e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80024fa:	231b      	movs	r3, #27
 80024fc:	2220      	movs	r2, #32
 80024fe:	189b      	adds	r3, r3, r2
 8002500:	19db      	adds	r3, r3, r7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d015      	beq.n	8002534 <UART_SetConfig+0x28c>
 8002508:	dc18      	bgt.n	800253c <UART_SetConfig+0x294>
 800250a:	2b04      	cmp	r3, #4
 800250c:	d00d      	beq.n	800252a <UART_SetConfig+0x282>
 800250e:	dc15      	bgt.n	800253c <UART_SetConfig+0x294>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <UART_SetConfig+0x272>
 8002514:	2b02      	cmp	r3, #2
 8002516:	d005      	beq.n	8002524 <UART_SetConfig+0x27c>
 8002518:	e010      	b.n	800253c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800251a:	f7ff fc05 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 800251e:	0003      	movs	r3, r0
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002522:	e014      	b.n	800254e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <UART_SetConfig+0x314>)
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002528:	e011      	b.n	800254e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800252a:	f7ff fb71 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 800252e:	0003      	movs	r3, r0
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002532:	e00c      	b.n	800254e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800253a:	e008      	b.n	800254e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002540:	231a      	movs	r3, #26
 8002542:	2220      	movs	r2, #32
 8002544:	189b      	adds	r3, r3, r2
 8002546:	19db      	adds	r3, r3, r7
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
        break;
 800254c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002550:	2b00      	cmp	r3, #0
 8002552:	d100      	bne.n	8002556 <UART_SetConfig+0x2ae>
 8002554:	e14b      	b.n	80027ee <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <UART_SetConfig+0x318>)
 800255c:	0052      	lsls	r2, r2, #1
 800255e:	5ad3      	ldrh	r3, [r2, r3]
 8002560:	0019      	movs	r1, r3
 8002562:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002564:	f7fd fde0 	bl	8000128 <__udivsi3>
 8002568:	0003      	movs	r3, r0
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	0013      	movs	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	189b      	adds	r3, r3, r2
 8002576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002578:	429a      	cmp	r2, r3
 800257a:	d305      	bcc.n	8002588 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002584:	429a      	cmp	r2, r3
 8002586:	d91d      	bls.n	80025c4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002588:	231a      	movs	r3, #26
 800258a:	2220      	movs	r2, #32
 800258c:	189b      	adds	r3, r3, r2
 800258e:	19db      	adds	r3, r3, r7
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e12b      	b.n	80027ee <UART_SetConfig+0x546>
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	cfff69f3 	.word	0xcfff69f3
 800259c:	ffffcfff 	.word	0xffffcfff
 80025a0:	40008000 	.word	0x40008000
 80025a4:	11fff4ff 	.word	0x11fff4ff
 80025a8:	40013800 	.word	0x40013800
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40004400 	.word	0x40004400
 80025b4:	40004800 	.word	0x40004800
 80025b8:	40004c00 	.word	0x40004c00
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	080037e8 	.word	0x080037e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d0:	4b92      	ldr	r3, [pc, #584]	; (800281c <UART_SetConfig+0x574>)
 80025d2:	0052      	lsls	r2, r2, #1
 80025d4:	5ad3      	ldrh	r3, [r2, r3]
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	69b8      	ldr	r0, [r7, #24]
 80025e2:	69f9      	ldr	r1, [r7, #28]
 80025e4:	f7fd ff16 	bl	8000414 <__aeabi_uldivmod>
 80025e8:	0002      	movs	r2, r0
 80025ea:	000b      	movs	r3, r1
 80025ec:	0e11      	lsrs	r1, r2, #24
 80025ee:	021d      	lsls	r5, r3, #8
 80025f0:	430d      	orrs	r5, r1
 80025f2:	0214      	lsls	r4, r2, #8
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68b8      	ldr	r0, [r7, #8]
 8002602:	68f9      	ldr	r1, [r7, #12]
 8002604:	1900      	adds	r0, r0, r4
 8002606:	4169      	adcs	r1, r5
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f7fd fefd 	bl	8000414 <__aeabi_uldivmod>
 800261a:	0002      	movs	r2, r0
 800261c:	000b      	movs	r3, r1
 800261e:	0013      	movs	r3, r2
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002624:	23c0      	movs	r3, #192	; 0xc0
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d309      	bcc.n	8002640 <UART_SetConfig+0x398>
 800262c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	035b      	lsls	r3, r3, #13
 8002632:	429a      	cmp	r2, r3
 8002634:	d204      	bcs.n	8002640 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	e0d6      	b.n	80027ee <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002640:	231a      	movs	r3, #26
 8002642:	2220      	movs	r2, #32
 8002644:	189b      	adds	r3, r3, r2
 8002646:	19db      	adds	r3, r3, r7
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e0cf      	b.n	80027ee <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	429a      	cmp	r2, r3
 8002658:	d000      	beq.n	800265c <UART_SetConfig+0x3b4>
 800265a:	e070      	b.n	800273e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800265c:	231b      	movs	r3, #27
 800265e:	2220      	movs	r2, #32
 8002660:	189b      	adds	r3, r3, r2
 8002662:	19db      	adds	r3, r3, r7
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b08      	cmp	r3, #8
 8002668:	d015      	beq.n	8002696 <UART_SetConfig+0x3ee>
 800266a:	dc18      	bgt.n	800269e <UART_SetConfig+0x3f6>
 800266c:	2b04      	cmp	r3, #4
 800266e:	d00d      	beq.n	800268c <UART_SetConfig+0x3e4>
 8002670:	dc15      	bgt.n	800269e <UART_SetConfig+0x3f6>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <UART_SetConfig+0x3d4>
 8002676:	2b02      	cmp	r3, #2
 8002678:	d005      	beq.n	8002686 <UART_SetConfig+0x3de>
 800267a:	e010      	b.n	800269e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800267c:	f7ff fb54 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002680:	0003      	movs	r3, r0
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002684:	e014      	b.n	80026b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002686:	4b66      	ldr	r3, [pc, #408]	; (8002820 <UART_SetConfig+0x578>)
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800268a:	e011      	b.n	80026b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800268c:	f7ff fac0 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002690:	0003      	movs	r3, r0
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002694:	e00c      	b.n	80026b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800269c:	e008      	b.n	80026b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80026a2:	231a      	movs	r3, #26
 80026a4:	2220      	movs	r2, #32
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	19db      	adds	r3, r3, r7
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
        break;
 80026ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d100      	bne.n	80026b8 <UART_SetConfig+0x410>
 80026b6:	e09a      	b.n	80027ee <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026bc:	4b57      	ldr	r3, [pc, #348]	; (800281c <UART_SetConfig+0x574>)
 80026be:	0052      	lsls	r2, r2, #1
 80026c0:	5ad3      	ldrh	r3, [r2, r3]
 80026c2:	0019      	movs	r1, r3
 80026c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026c6:	f7fd fd2f 	bl	8000128 <__udivsi3>
 80026ca:	0003      	movs	r3, r0
 80026cc:	005a      	lsls	r2, r3, #1
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	18d2      	adds	r2, r2, r3
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0019      	movs	r1, r3
 80026dc:	0010      	movs	r0, r2
 80026de:	f7fd fd23 	bl	8000128 <__udivsi3>
 80026e2:	0003      	movs	r3, r0
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d921      	bls.n	8002730 <UART_SetConfig+0x488>
 80026ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	025b      	lsls	r3, r3, #9
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d21c      	bcs.n	8002730 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	200e      	movs	r0, #14
 80026fc:	2420      	movs	r4, #32
 80026fe:	1903      	adds	r3, r0, r4
 8002700:	19db      	adds	r3, r3, r7
 8002702:	210f      	movs	r1, #15
 8002704:	438a      	bics	r2, r1
 8002706:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	b29b      	uxth	r3, r3
 800270e:	2207      	movs	r2, #7
 8002710:	4013      	ands	r3, r2
 8002712:	b299      	uxth	r1, r3
 8002714:	1903      	adds	r3, r0, r4
 8002716:	19db      	adds	r3, r3, r7
 8002718:	1902      	adds	r2, r0, r4
 800271a:	19d2      	adds	r2, r2, r7
 800271c:	8812      	ldrh	r2, [r2, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1902      	adds	r2, r0, r4
 8002728:	19d2      	adds	r2, r2, r7
 800272a:	8812      	ldrh	r2, [r2, #0]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	e05e      	b.n	80027ee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002730:	231a      	movs	r3, #26
 8002732:	2220      	movs	r2, #32
 8002734:	189b      	adds	r3, r3, r2
 8002736:	19db      	adds	r3, r3, r7
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e057      	b.n	80027ee <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800273e:	231b      	movs	r3, #27
 8002740:	2220      	movs	r2, #32
 8002742:	189b      	adds	r3, r3, r2
 8002744:	19db      	adds	r3, r3, r7
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d015      	beq.n	8002778 <UART_SetConfig+0x4d0>
 800274c:	dc18      	bgt.n	8002780 <UART_SetConfig+0x4d8>
 800274e:	2b04      	cmp	r3, #4
 8002750:	d00d      	beq.n	800276e <UART_SetConfig+0x4c6>
 8002752:	dc15      	bgt.n	8002780 <UART_SetConfig+0x4d8>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <UART_SetConfig+0x4b6>
 8002758:	2b02      	cmp	r3, #2
 800275a:	d005      	beq.n	8002768 <UART_SetConfig+0x4c0>
 800275c:	e010      	b.n	8002780 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800275e:	f7ff fae3 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002762:	0003      	movs	r3, r0
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002766:	e014      	b.n	8002792 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <UART_SetConfig+0x578>)
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800276c:	e011      	b.n	8002792 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800276e:	f7ff fa4f 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002772:	0003      	movs	r3, r0
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002776:	e00c      	b.n	8002792 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800277e:	e008      	b.n	8002792 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002784:	231a      	movs	r3, #26
 8002786:	2220      	movs	r2, #32
 8002788:	189b      	adds	r3, r3, r2
 800278a:	19db      	adds	r3, r3, r7
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
        break;
 8002790:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02a      	beq.n	80027ee <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800279c:	4b1f      	ldr	r3, [pc, #124]	; (800281c <UART_SetConfig+0x574>)
 800279e:	0052      	lsls	r2, r2, #1
 80027a0:	5ad3      	ldrh	r3, [r2, r3]
 80027a2:	0019      	movs	r1, r3
 80027a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027a6:	f7fd fcbf 	bl	8000128 <__udivsi3>
 80027aa:	0003      	movs	r3, r0
 80027ac:	001a      	movs	r2, r3
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	18d2      	adds	r2, r2, r3
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	0019      	movs	r1, r3
 80027bc:	0010      	movs	r0, r2
 80027be:	f7fd fcb3 	bl	8000128 <__udivsi3>
 80027c2:	0003      	movs	r3, r0
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d90a      	bls.n	80027e2 <UART_SetConfig+0x53a>
 80027cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	025b      	lsls	r3, r3, #9
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d205      	bcs.n	80027e2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	b29a      	uxth	r2, r3
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60da      	str	r2, [r3, #12]
 80027e0:	e005      	b.n	80027ee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80027e2:	231a      	movs	r3, #26
 80027e4:	2220      	movs	r2, #32
 80027e6:	189b      	adds	r3, r3, r2
 80027e8:	19db      	adds	r3, r3, r7
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	226a      	movs	r2, #106	; 0x6a
 80027f2:	2101      	movs	r1, #1
 80027f4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	2268      	movs	r2, #104	; 0x68
 80027fa:	2101      	movs	r1, #1
 80027fc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	2200      	movs	r2, #0
 8002802:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	2200      	movs	r2, #0
 8002808:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800280a:	231a      	movs	r3, #26
 800280c:	2220      	movs	r2, #32
 800280e:	189b      	adds	r3, r3, r2
 8002810:	19db      	adds	r3, r3, r7
 8002812:	781b      	ldrb	r3, [r3, #0]
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b010      	add	sp, #64	; 0x40
 800281a:	bdb0      	pop	{r4, r5, r7, pc}
 800281c:	080037e8 	.word	0x080037e8
 8002820:	00f42400 	.word	0x00f42400

08002824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	d00b      	beq.n	800284e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a4a      	ldr	r2, [pc, #296]	; (8002968 <UART_AdvFeatureConfig+0x144>)
 800283e:	4013      	ands	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	2202      	movs	r2, #2
 8002854:	4013      	ands	r3, r2
 8002856:	d00b      	beq.n	8002870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a43      	ldr	r2, [pc, #268]	; (800296c <UART_AdvFeatureConfig+0x148>)
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	2204      	movs	r2, #4
 8002876:	4013      	ands	r3, r2
 8002878:	d00b      	beq.n	8002892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a3b      	ldr	r2, [pc, #236]	; (8002970 <UART_AdvFeatureConfig+0x14c>)
 8002882:	4013      	ands	r3, r2
 8002884:	0019      	movs	r1, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	2208      	movs	r2, #8
 8002898:	4013      	ands	r3, r2
 800289a:	d00b      	beq.n	80028b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4a34      	ldr	r2, [pc, #208]	; (8002974 <UART_AdvFeatureConfig+0x150>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	2210      	movs	r2, #16
 80028ba:	4013      	ands	r3, r2
 80028bc:	d00b      	beq.n	80028d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a2c      	ldr	r2, [pc, #176]	; (8002978 <UART_AdvFeatureConfig+0x154>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	2220      	movs	r2, #32
 80028dc:	4013      	ands	r3, r2
 80028de:	d00b      	beq.n	80028f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4a25      	ldr	r2, [pc, #148]	; (800297c <UART_AdvFeatureConfig+0x158>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	4013      	ands	r3, r2
 8002900:	d01d      	beq.n	800293e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <UART_AdvFeatureConfig+0x15c>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	035b      	lsls	r3, r3, #13
 8002922:	429a      	cmp	r2, r3
 8002924:	d10b      	bne.n	800293e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a15      	ldr	r2, [pc, #84]	; (8002984 <UART_AdvFeatureConfig+0x160>)
 800292e:	4013      	ands	r3, r2
 8002930:	0019      	movs	r1, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	4013      	ands	r3, r2
 8002946:	d00b      	beq.n	8002960 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <UART_AdvFeatureConfig+0x164>)
 8002950:	4013      	ands	r3, r2
 8002952:	0019      	movs	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  }
}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	b002      	add	sp, #8
 8002966:	bd80      	pop	{r7, pc}
 8002968:	fffdffff 	.word	0xfffdffff
 800296c:	fffeffff 	.word	0xfffeffff
 8002970:	fffbffff 	.word	0xfffbffff
 8002974:	ffff7fff 	.word	0xffff7fff
 8002978:	ffffefff 	.word	0xffffefff
 800297c:	ffffdfff 	.word	0xffffdfff
 8002980:	ffefffff 	.word	0xffefffff
 8002984:	ff9fffff 	.word	0xff9fffff
 8002988:	fff7ffff 	.word	0xfff7ffff

0800298c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af02      	add	r7, sp, #8
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2290      	movs	r2, #144	; 0x90
 8002998:	2100      	movs	r1, #0
 800299a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800299c:	f7fe fa36 	bl	8000e0c <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2208      	movs	r2, #8
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d10c      	bne.n	80029cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	0391      	lsls	r1, r2, #14
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <UART_CheckIdleState+0x98>)
 80029bc:	9200      	str	r2, [sp, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	f000 f832 	bl	8002a28 <UART_WaitOnFlagUntilTimeout>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	d001      	beq.n	80029cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e026      	b.n	8002a1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2204      	movs	r2, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d10c      	bne.n	80029f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	03d1      	lsls	r1, r2, #15
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <UART_CheckIdleState+0x98>)
 80029e4:	9200      	str	r2, [sp, #0]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f000 f81e 	bl	8002a28 <UART_WaitOnFlagUntilTimeout>
 80029ec:	1e03      	subs	r3, r0, #0
 80029ee:	d001      	beq.n	80029f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e012      	b.n	8002a1a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2288      	movs	r2, #136	; 0x88
 80029f8:	2120      	movs	r1, #32
 80029fa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	228c      	movs	r2, #140	; 0x8c
 8002a00:	2120      	movs	r1, #32
 8002a02:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2284      	movs	r2, #132	; 0x84
 8002a14:	2100      	movs	r1, #0
 8002a16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	01ffffff 	.word	0x01ffffff

08002a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b094      	sub	sp, #80	; 0x50
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a38:	e0a7      	b.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	d100      	bne.n	8002a42 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a40:	e0a3      	b.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe f9e3 	bl	8000e0c <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d13f      	bne.n	8002ad8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a58:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a60:	647b      	str	r3, [r7, #68]	; 0x44
 8002a62:	2301      	movs	r3, #1
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	f383 8810 	msr	PRIMASK, r3
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	494e      	ldr	r1, [pc, #312]	; (8002bb4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	f383 8810 	msr	PRIMASK, r3
}
 8002a88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a92:	643b      	str	r3, [r7, #64]	; 0x40
 8002a94:	2301      	movs	r3, #1
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	f383 8810 	msr	PRIMASK, r3
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2101      	movs	r1, #1
 8002aac:	438a      	bics	r2, r1
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab6:	f383 8810 	msr	PRIMASK, r3
}
 8002aba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2288      	movs	r2, #136	; 0x88
 8002ac0:	2120      	movs	r1, #32
 8002ac2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	228c      	movs	r2, #140	; 0x8c
 8002ac8:	2120      	movs	r1, #32
 8002aca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2284      	movs	r2, #132	; 0x84
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e069      	b.n	8002bac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d052      	beq.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	401a      	ands	r2, r3
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d148      	bne.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2280      	movs	r2, #128	; 0x80
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b02:	f3ef 8310 	mrs	r3, PRIMASK
 8002b06:	613b      	str	r3, [r7, #16]
  return(result);
 8002b08:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f383 8810 	msr	PRIMASK, r3
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4924      	ldr	r1, [pc, #144]	; (8002bb4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f383 8810 	msr	PRIMASK, r3
}
 8002b32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b34:	f3ef 8310 	mrs	r3, PRIMASK
 8002b38:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b3a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b3e:	2301      	movs	r3, #1
 8002b40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	f383 8810 	msr	PRIMASK, r3
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2101      	movs	r1, #1
 8002b56:	438a      	bics	r2, r1
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f383 8810 	msr	PRIMASK, r3
}
 8002b64:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2288      	movs	r2, #136	; 0x88
 8002b6a:	2120      	movs	r1, #32
 8002b6c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	228c      	movs	r2, #140	; 0x8c
 8002b72:	2120      	movs	r1, #32
 8002b74:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2290      	movs	r2, #144	; 0x90
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2284      	movs	r2, #132	; 0x84
 8002b82:	2100      	movs	r1, #0
 8002b84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e010      	b.n	8002bac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	4013      	ands	r3, r2
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	425a      	negs	r2, r3
 8002b9a:	4153      	adcs	r3, r2
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	1dfb      	adds	r3, r7, #7
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d100      	bne.n	8002baa <UART_WaitOnFlagUntilTimeout+0x182>
 8002ba8:	e747      	b.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b014      	add	sp, #80	; 0x50
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	fffffe5f 	.word	0xfffffe5f

08002bb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2284      	movs	r2, #132	; 0x84
 8002bc4:	5c9b      	ldrb	r3, [r3, r2]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_UARTEx_DisableFifoMode+0x16>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e027      	b.n	8002c1e <HAL_UARTEx_DisableFifoMode+0x66>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2284      	movs	r2, #132	; 0x84
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2288      	movs	r2, #136	; 0x88
 8002bda:	2124      	movs	r1, #36	; 0x24
 8002bdc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	438a      	bics	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2288      	movs	r2, #136	; 0x88
 8002c10:	2120      	movs	r1, #32
 8002c12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2284      	movs	r2, #132	; 0x84
 8002c18:	2100      	movs	r1, #0
 8002c1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	0018      	movs	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b004      	add	sp, #16
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	dfffffff 	.word	0xdfffffff

08002c2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2284      	movs	r2, #132	; 0x84
 8002c3a:	5c9b      	ldrb	r3, [r3, r2]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e02e      	b.n	8002ca2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2284      	movs	r2, #132	; 0x84
 8002c48:	2101      	movs	r1, #1
 8002c4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2288      	movs	r2, #136	; 0x88
 8002c50:	2124      	movs	r1, #36	; 0x24
 8002c52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2101      	movs	r1, #1
 8002c68:	438a      	bics	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	08d9      	lsrs	r1, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 f854 	bl	8002d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2288      	movs	r2, #136	; 0x88
 8002c94:	2120      	movs	r1, #32
 8002c96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2284      	movs	r2, #132	; 0x84
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2284      	movs	r2, #132	; 0x84
 8002cba:	5c9b      	ldrb	r3, [r3, r2]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e02f      	b.n	8002d24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2284      	movs	r2, #132	; 0x84
 8002cc8:	2101      	movs	r1, #1
 8002cca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2288      	movs	r2, #136	; 0x88
 8002cd0:	2124      	movs	r1, #36	; 0x24
 8002cd2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	438a      	bics	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f813 	bl	8002d30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2288      	movs	r2, #136	; 0x88
 8002d16:	2120      	movs	r1, #32
 8002d18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2284      	movs	r2, #132	; 0x84
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b004      	add	sp, #16
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	f1ffffff 	.word	0xf1ffffff

08002d30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d108      	bne.n	8002d52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	226a      	movs	r2, #106	; 0x6a
 8002d44:	2101      	movs	r1, #1
 8002d46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2268      	movs	r2, #104	; 0x68
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d50:	e043      	b.n	8002dda <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d52:	260f      	movs	r6, #15
 8002d54:	19bb      	adds	r3, r7, r6
 8002d56:	2208      	movs	r2, #8
 8002d58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d5a:	200e      	movs	r0, #14
 8002d5c:	183b      	adds	r3, r7, r0
 8002d5e:	2208      	movs	r2, #8
 8002d60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	0e5b      	lsrs	r3, r3, #25
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	240d      	movs	r4, #13
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2107      	movs	r1, #7
 8002d72:	400a      	ands	r2, r1
 8002d74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	0f5b      	lsrs	r3, r3, #29
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	250c      	movs	r5, #12
 8002d82:	197b      	adds	r3, r7, r5
 8002d84:	2107      	movs	r1, #7
 8002d86:	400a      	ands	r2, r1
 8002d88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d8a:	183b      	adds	r3, r7, r0
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	197a      	adds	r2, r7, r5
 8002d90:	7812      	ldrb	r2, [r2, #0]
 8002d92:	4914      	ldr	r1, [pc, #80]	; (8002de4 <UARTEx_SetNbDataToProcess+0xb4>)
 8002d94:	5c8a      	ldrb	r2, [r1, r2]
 8002d96:	435a      	muls	r2, r3
 8002d98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d9a:	197b      	adds	r3, r7, r5
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <UARTEx_SetNbDataToProcess+0xb8>)
 8002da0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002da2:	0019      	movs	r1, r3
 8002da4:	f7fd fa4a 	bl	800023c <__divsi3>
 8002da8:	0003      	movs	r3, r0
 8002daa:	b299      	uxth	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	226a      	movs	r2, #106	; 0x6a
 8002db0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002db2:	19bb      	adds	r3, r7, r6
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	193a      	adds	r2, r7, r4
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	490a      	ldr	r1, [pc, #40]	; (8002de4 <UARTEx_SetNbDataToProcess+0xb4>)
 8002dbc:	5c8a      	ldrb	r2, [r1, r2]
 8002dbe:	435a      	muls	r2, r3
 8002dc0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002dc2:	193b      	adds	r3, r7, r4
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <UARTEx_SetNbDataToProcess+0xb8>)
 8002dc8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dca:	0019      	movs	r1, r3
 8002dcc:	f7fd fa36 	bl	800023c <__divsi3>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	b299      	uxth	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2268      	movs	r2, #104	; 0x68
 8002dd8:	5299      	strh	r1, [r3, r2]
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b005      	add	sp, #20
 8002de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	08003800 	.word	0x08003800
 8002de8:	08003808 	.word	0x08003808

08002dec <__errno>:
 8002dec:	4b01      	ldr	r3, [pc, #4]	; (8002df4 <__errno+0x8>)
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	4770      	bx	lr
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	2000000c 	.word	0x2000000c

08002df8 <__libc_init_array>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	4d0c      	ldr	r5, [pc, #48]	; (8002e30 <__libc_init_array+0x38>)
 8002dfe:	4c0d      	ldr	r4, [pc, #52]	; (8002e34 <__libc_init_array+0x3c>)
 8002e00:	1b64      	subs	r4, r4, r5
 8002e02:	10a4      	asrs	r4, r4, #2
 8002e04:	42a6      	cmp	r6, r4
 8002e06:	d109      	bne.n	8002e1c <__libc_init_array+0x24>
 8002e08:	2600      	movs	r6, #0
 8002e0a:	f000 fc8b 	bl	8003724 <_init>
 8002e0e:	4d0a      	ldr	r5, [pc, #40]	; (8002e38 <__libc_init_array+0x40>)
 8002e10:	4c0a      	ldr	r4, [pc, #40]	; (8002e3c <__libc_init_array+0x44>)
 8002e12:	1b64      	subs	r4, r4, r5
 8002e14:	10a4      	asrs	r4, r4, #2
 8002e16:	42a6      	cmp	r6, r4
 8002e18:	d105      	bne.n	8002e26 <__libc_init_array+0x2e>
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
 8002e1c:	00b3      	lsls	r3, r6, #2
 8002e1e:	58eb      	ldr	r3, [r5, r3]
 8002e20:	4798      	blx	r3
 8002e22:	3601      	adds	r6, #1
 8002e24:	e7ee      	b.n	8002e04 <__libc_init_array+0xc>
 8002e26:	00b3      	lsls	r3, r6, #2
 8002e28:	58eb      	ldr	r3, [r5, r3]
 8002e2a:	4798      	blx	r3
 8002e2c:	3601      	adds	r6, #1
 8002e2e:	e7f2      	b.n	8002e16 <__libc_init_array+0x1e>
 8002e30:	0800384c 	.word	0x0800384c
 8002e34:	0800384c 	.word	0x0800384c
 8002e38:	0800384c 	.word	0x0800384c
 8002e3c:	08003850 	.word	0x08003850

08002e40 <memset>:
 8002e40:	0003      	movs	r3, r0
 8002e42:	1882      	adds	r2, r0, r2
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d100      	bne.n	8002e4a <memset+0xa>
 8002e48:	4770      	bx	lr
 8002e4a:	7019      	strb	r1, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	e7f9      	b.n	8002e44 <memset+0x4>

08002e50 <siprintf>:
 8002e50:	b40e      	push	{r1, r2, r3}
 8002e52:	b500      	push	{lr}
 8002e54:	490b      	ldr	r1, [pc, #44]	; (8002e84 <siprintf+0x34>)
 8002e56:	b09c      	sub	sp, #112	; 0x70
 8002e58:	ab1d      	add	r3, sp, #116	; 0x74
 8002e5a:	9002      	str	r0, [sp, #8]
 8002e5c:	9006      	str	r0, [sp, #24]
 8002e5e:	9107      	str	r1, [sp, #28]
 8002e60:	9104      	str	r1, [sp, #16]
 8002e62:	4809      	ldr	r0, [pc, #36]	; (8002e88 <siprintf+0x38>)
 8002e64:	4909      	ldr	r1, [pc, #36]	; (8002e8c <siprintf+0x3c>)
 8002e66:	cb04      	ldmia	r3!, {r2}
 8002e68:	9105      	str	r1, [sp, #20]
 8002e6a:	6800      	ldr	r0, [r0, #0]
 8002e6c:	a902      	add	r1, sp, #8
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	f000 f870 	bl	8002f54 <_svfiprintf_r>
 8002e74:	2300      	movs	r3, #0
 8002e76:	9a02      	ldr	r2, [sp, #8]
 8002e78:	7013      	strb	r3, [r2, #0]
 8002e7a:	b01c      	add	sp, #112	; 0x70
 8002e7c:	bc08      	pop	{r3}
 8002e7e:	b003      	add	sp, #12
 8002e80:	4718      	bx	r3
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	7fffffff 	.word	0x7fffffff
 8002e88:	2000000c 	.word	0x2000000c
 8002e8c:	ffff0208 	.word	0xffff0208

08002e90 <__ssputs_r>:
 8002e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e92:	688e      	ldr	r6, [r1, #8]
 8002e94:	b085      	sub	sp, #20
 8002e96:	0007      	movs	r7, r0
 8002e98:	000c      	movs	r4, r1
 8002e9a:	9203      	str	r2, [sp, #12]
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	429e      	cmp	r6, r3
 8002ea0:	d83c      	bhi.n	8002f1c <__ssputs_r+0x8c>
 8002ea2:	2390      	movs	r3, #144	; 0x90
 8002ea4:	898a      	ldrh	r2, [r1, #12]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	421a      	tst	r2, r3
 8002eaa:	d034      	beq.n	8002f16 <__ssputs_r+0x86>
 8002eac:	6909      	ldr	r1, [r1, #16]
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	6960      	ldr	r0, [r4, #20]
 8002eb2:	1a5b      	subs	r3, r3, r1
 8002eb4:	9302      	str	r3, [sp, #8]
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	4343      	muls	r3, r0
 8002eba:	0fdd      	lsrs	r5, r3, #31
 8002ebc:	18ed      	adds	r5, r5, r3
 8002ebe:	9b01      	ldr	r3, [sp, #4]
 8002ec0:	9802      	ldr	r0, [sp, #8]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	181b      	adds	r3, r3, r0
 8002ec6:	106d      	asrs	r5, r5, #1
 8002ec8:	42ab      	cmp	r3, r5
 8002eca:	d900      	bls.n	8002ece <__ssputs_r+0x3e>
 8002ecc:	001d      	movs	r5, r3
 8002ece:	0553      	lsls	r3, r2, #21
 8002ed0:	d532      	bpl.n	8002f38 <__ssputs_r+0xa8>
 8002ed2:	0029      	movs	r1, r5
 8002ed4:	0038      	movs	r0, r7
 8002ed6:	f000 fb53 	bl	8003580 <_malloc_r>
 8002eda:	1e06      	subs	r6, r0, #0
 8002edc:	d109      	bne.n	8002ef2 <__ssputs_r+0x62>
 8002ede:	230c      	movs	r3, #12
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	2340      	movs	r3, #64	; 0x40
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	89a2      	ldrh	r2, [r4, #12]
 8002ee8:	4240      	negs	r0, r0
 8002eea:	4313      	orrs	r3, r2
 8002eec:	81a3      	strh	r3, [r4, #12]
 8002eee:	b005      	add	sp, #20
 8002ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef2:	9a02      	ldr	r2, [sp, #8]
 8002ef4:	6921      	ldr	r1, [r4, #16]
 8002ef6:	f000 faba 	bl	800346e <memcpy>
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <__ssputs_r+0xc0>)
 8002efe:	401a      	ands	r2, r3
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	4313      	orrs	r3, r2
 8002f04:	81a3      	strh	r3, [r4, #12]
 8002f06:	9b02      	ldr	r3, [sp, #8]
 8002f08:	6126      	str	r6, [r4, #16]
 8002f0a:	18f6      	adds	r6, r6, r3
 8002f0c:	6026      	str	r6, [r4, #0]
 8002f0e:	6165      	str	r5, [r4, #20]
 8002f10:	9e01      	ldr	r6, [sp, #4]
 8002f12:	1aed      	subs	r5, r5, r3
 8002f14:	60a5      	str	r5, [r4, #8]
 8002f16:	9b01      	ldr	r3, [sp, #4]
 8002f18:	429e      	cmp	r6, r3
 8002f1a:	d900      	bls.n	8002f1e <__ssputs_r+0x8e>
 8002f1c:	9e01      	ldr	r6, [sp, #4]
 8002f1e:	0032      	movs	r2, r6
 8002f20:	9903      	ldr	r1, [sp, #12]
 8002f22:	6820      	ldr	r0, [r4, #0]
 8002f24:	f000 faac 	bl	8003480 <memmove>
 8002f28:	68a3      	ldr	r3, [r4, #8]
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	1b9b      	subs	r3, r3, r6
 8002f2e:	60a3      	str	r3, [r4, #8]
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	199e      	adds	r6, r3, r6
 8002f34:	6026      	str	r6, [r4, #0]
 8002f36:	e7da      	b.n	8002eee <__ssputs_r+0x5e>
 8002f38:	002a      	movs	r2, r5
 8002f3a:	0038      	movs	r0, r7
 8002f3c:	f000 fb96 	bl	800366c <_realloc_r>
 8002f40:	1e06      	subs	r6, r0, #0
 8002f42:	d1e0      	bne.n	8002f06 <__ssputs_r+0x76>
 8002f44:	0038      	movs	r0, r7
 8002f46:	6921      	ldr	r1, [r4, #16]
 8002f48:	f000 faae 	bl	80034a8 <_free_r>
 8002f4c:	e7c7      	b.n	8002ede <__ssputs_r+0x4e>
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	fffffb7f 	.word	0xfffffb7f

08002f54 <_svfiprintf_r>:
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f56:	b0a1      	sub	sp, #132	; 0x84
 8002f58:	9003      	str	r0, [sp, #12]
 8002f5a:	001d      	movs	r5, r3
 8002f5c:	898b      	ldrh	r3, [r1, #12]
 8002f5e:	000f      	movs	r7, r1
 8002f60:	0016      	movs	r6, r2
 8002f62:	061b      	lsls	r3, r3, #24
 8002f64:	d511      	bpl.n	8002f8a <_svfiprintf_r+0x36>
 8002f66:	690b      	ldr	r3, [r1, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10e      	bne.n	8002f8a <_svfiprintf_r+0x36>
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	f000 fb07 	bl	8003580 <_malloc_r>
 8002f72:	6038      	str	r0, [r7, #0]
 8002f74:	6138      	str	r0, [r7, #16]
 8002f76:	2800      	cmp	r0, #0
 8002f78:	d105      	bne.n	8002f86 <_svfiprintf_r+0x32>
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	9a03      	ldr	r2, [sp, #12]
 8002f7e:	3801      	subs	r0, #1
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	b021      	add	sp, #132	; 0x84
 8002f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f86:	2340      	movs	r3, #64	; 0x40
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	ac08      	add	r4, sp, #32
 8002f8e:	6163      	str	r3, [r4, #20]
 8002f90:	3320      	adds	r3, #32
 8002f92:	7663      	strb	r3, [r4, #25]
 8002f94:	3310      	adds	r3, #16
 8002f96:	76a3      	strb	r3, [r4, #26]
 8002f98:	9507      	str	r5, [sp, #28]
 8002f9a:	0035      	movs	r5, r6
 8002f9c:	782b      	ldrb	r3, [r5, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <_svfiprintf_r+0x52>
 8002fa2:	2b25      	cmp	r3, #37	; 0x25
 8002fa4:	d147      	bne.n	8003036 <_svfiprintf_r+0xe2>
 8002fa6:	1bab      	subs	r3, r5, r6
 8002fa8:	9305      	str	r3, [sp, #20]
 8002faa:	42b5      	cmp	r5, r6
 8002fac:	d00c      	beq.n	8002fc8 <_svfiprintf_r+0x74>
 8002fae:	0032      	movs	r2, r6
 8002fb0:	0039      	movs	r1, r7
 8002fb2:	9803      	ldr	r0, [sp, #12]
 8002fb4:	f7ff ff6c 	bl	8002e90 <__ssputs_r>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d100      	bne.n	8002fbe <_svfiprintf_r+0x6a>
 8002fbc:	e0ae      	b.n	800311c <_svfiprintf_r+0x1c8>
 8002fbe:	6962      	ldr	r2, [r4, #20]
 8002fc0:	9b05      	ldr	r3, [sp, #20]
 8002fc2:	4694      	mov	ip, r2
 8002fc4:	4463      	add	r3, ip
 8002fc6:	6163      	str	r3, [r4, #20]
 8002fc8:	782b      	ldrb	r3, [r5, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d100      	bne.n	8002fd0 <_svfiprintf_r+0x7c>
 8002fce:	e0a5      	b.n	800311c <_svfiprintf_r+0x1c8>
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	4252      	negs	r2, r2
 8002fd6:	6062      	str	r2, [r4, #4]
 8002fd8:	a904      	add	r1, sp, #16
 8002fda:	3254      	adds	r2, #84	; 0x54
 8002fdc:	1852      	adds	r2, r2, r1
 8002fde:	1c6e      	adds	r6, r5, #1
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	60e3      	str	r3, [r4, #12]
 8002fe4:	60a3      	str	r3, [r4, #8]
 8002fe6:	7013      	strb	r3, [r2, #0]
 8002fe8:	65a3      	str	r3, [r4, #88]	; 0x58
 8002fea:	2205      	movs	r2, #5
 8002fec:	7831      	ldrb	r1, [r6, #0]
 8002fee:	4854      	ldr	r0, [pc, #336]	; (8003140 <_svfiprintf_r+0x1ec>)
 8002ff0:	f000 fa32 	bl	8003458 <memchr>
 8002ff4:	1c75      	adds	r5, r6, #1
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d11f      	bne.n	800303a <_svfiprintf_r+0xe6>
 8002ffa:	6822      	ldr	r2, [r4, #0]
 8002ffc:	06d3      	lsls	r3, r2, #27
 8002ffe:	d504      	bpl.n	800300a <_svfiprintf_r+0xb6>
 8003000:	2353      	movs	r3, #83	; 0x53
 8003002:	a904      	add	r1, sp, #16
 8003004:	185b      	adds	r3, r3, r1
 8003006:	2120      	movs	r1, #32
 8003008:	7019      	strb	r1, [r3, #0]
 800300a:	0713      	lsls	r3, r2, #28
 800300c:	d504      	bpl.n	8003018 <_svfiprintf_r+0xc4>
 800300e:	2353      	movs	r3, #83	; 0x53
 8003010:	a904      	add	r1, sp, #16
 8003012:	185b      	adds	r3, r3, r1
 8003014:	212b      	movs	r1, #43	; 0x2b
 8003016:	7019      	strb	r1, [r3, #0]
 8003018:	7833      	ldrb	r3, [r6, #0]
 800301a:	2b2a      	cmp	r3, #42	; 0x2a
 800301c:	d016      	beq.n	800304c <_svfiprintf_r+0xf8>
 800301e:	0035      	movs	r5, r6
 8003020:	2100      	movs	r1, #0
 8003022:	200a      	movs	r0, #10
 8003024:	68e3      	ldr	r3, [r4, #12]
 8003026:	782a      	ldrb	r2, [r5, #0]
 8003028:	1c6e      	adds	r6, r5, #1
 800302a:	3a30      	subs	r2, #48	; 0x30
 800302c:	2a09      	cmp	r2, #9
 800302e:	d94e      	bls.n	80030ce <_svfiprintf_r+0x17a>
 8003030:	2900      	cmp	r1, #0
 8003032:	d111      	bne.n	8003058 <_svfiprintf_r+0x104>
 8003034:	e017      	b.n	8003066 <_svfiprintf_r+0x112>
 8003036:	3501      	adds	r5, #1
 8003038:	e7b0      	b.n	8002f9c <_svfiprintf_r+0x48>
 800303a:	4b41      	ldr	r3, [pc, #260]	; (8003140 <_svfiprintf_r+0x1ec>)
 800303c:	6822      	ldr	r2, [r4, #0]
 800303e:	1ac0      	subs	r0, r0, r3
 8003040:	2301      	movs	r3, #1
 8003042:	4083      	lsls	r3, r0
 8003044:	4313      	orrs	r3, r2
 8003046:	002e      	movs	r6, r5
 8003048:	6023      	str	r3, [r4, #0]
 800304a:	e7ce      	b.n	8002fea <_svfiprintf_r+0x96>
 800304c:	9b07      	ldr	r3, [sp, #28]
 800304e:	1d19      	adds	r1, r3, #4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	9107      	str	r1, [sp, #28]
 8003054:	2b00      	cmp	r3, #0
 8003056:	db01      	blt.n	800305c <_svfiprintf_r+0x108>
 8003058:	930b      	str	r3, [sp, #44]	; 0x2c
 800305a:	e004      	b.n	8003066 <_svfiprintf_r+0x112>
 800305c:	425b      	negs	r3, r3
 800305e:	60e3      	str	r3, [r4, #12]
 8003060:	2302      	movs	r3, #2
 8003062:	4313      	orrs	r3, r2
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	782b      	ldrb	r3, [r5, #0]
 8003068:	2b2e      	cmp	r3, #46	; 0x2e
 800306a:	d10a      	bne.n	8003082 <_svfiprintf_r+0x12e>
 800306c:	786b      	ldrb	r3, [r5, #1]
 800306e:	2b2a      	cmp	r3, #42	; 0x2a
 8003070:	d135      	bne.n	80030de <_svfiprintf_r+0x18a>
 8003072:	9b07      	ldr	r3, [sp, #28]
 8003074:	3502      	adds	r5, #2
 8003076:	1d1a      	adds	r2, r3, #4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	9207      	str	r2, [sp, #28]
 800307c:	2b00      	cmp	r3, #0
 800307e:	db2b      	blt.n	80030d8 <_svfiprintf_r+0x184>
 8003080:	9309      	str	r3, [sp, #36]	; 0x24
 8003082:	4e30      	ldr	r6, [pc, #192]	; (8003144 <_svfiprintf_r+0x1f0>)
 8003084:	2203      	movs	r2, #3
 8003086:	0030      	movs	r0, r6
 8003088:	7829      	ldrb	r1, [r5, #0]
 800308a:	f000 f9e5 	bl	8003458 <memchr>
 800308e:	2800      	cmp	r0, #0
 8003090:	d006      	beq.n	80030a0 <_svfiprintf_r+0x14c>
 8003092:	2340      	movs	r3, #64	; 0x40
 8003094:	1b80      	subs	r0, r0, r6
 8003096:	4083      	lsls	r3, r0
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	3501      	adds	r5, #1
 800309c:	4313      	orrs	r3, r2
 800309e:	6023      	str	r3, [r4, #0]
 80030a0:	7829      	ldrb	r1, [r5, #0]
 80030a2:	2206      	movs	r2, #6
 80030a4:	4828      	ldr	r0, [pc, #160]	; (8003148 <_svfiprintf_r+0x1f4>)
 80030a6:	1c6e      	adds	r6, r5, #1
 80030a8:	7621      	strb	r1, [r4, #24]
 80030aa:	f000 f9d5 	bl	8003458 <memchr>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d03c      	beq.n	800312c <_svfiprintf_r+0x1d8>
 80030b2:	4b26      	ldr	r3, [pc, #152]	; (800314c <_svfiprintf_r+0x1f8>)
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d125      	bne.n	8003104 <_svfiprintf_r+0x1b0>
 80030b8:	2207      	movs	r2, #7
 80030ba:	9b07      	ldr	r3, [sp, #28]
 80030bc:	3307      	adds	r3, #7
 80030be:	4393      	bics	r3, r2
 80030c0:	3308      	adds	r3, #8
 80030c2:	9307      	str	r3, [sp, #28]
 80030c4:	6963      	ldr	r3, [r4, #20]
 80030c6:	9a04      	ldr	r2, [sp, #16]
 80030c8:	189b      	adds	r3, r3, r2
 80030ca:	6163      	str	r3, [r4, #20]
 80030cc:	e765      	b.n	8002f9a <_svfiprintf_r+0x46>
 80030ce:	4343      	muls	r3, r0
 80030d0:	0035      	movs	r5, r6
 80030d2:	2101      	movs	r1, #1
 80030d4:	189b      	adds	r3, r3, r2
 80030d6:	e7a6      	b.n	8003026 <_svfiprintf_r+0xd2>
 80030d8:	2301      	movs	r3, #1
 80030da:	425b      	negs	r3, r3
 80030dc:	e7d0      	b.n	8003080 <_svfiprintf_r+0x12c>
 80030de:	2300      	movs	r3, #0
 80030e0:	200a      	movs	r0, #10
 80030e2:	001a      	movs	r2, r3
 80030e4:	3501      	adds	r5, #1
 80030e6:	6063      	str	r3, [r4, #4]
 80030e8:	7829      	ldrb	r1, [r5, #0]
 80030ea:	1c6e      	adds	r6, r5, #1
 80030ec:	3930      	subs	r1, #48	; 0x30
 80030ee:	2909      	cmp	r1, #9
 80030f0:	d903      	bls.n	80030fa <_svfiprintf_r+0x1a6>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0c5      	beq.n	8003082 <_svfiprintf_r+0x12e>
 80030f6:	9209      	str	r2, [sp, #36]	; 0x24
 80030f8:	e7c3      	b.n	8003082 <_svfiprintf_r+0x12e>
 80030fa:	4342      	muls	r2, r0
 80030fc:	0035      	movs	r5, r6
 80030fe:	2301      	movs	r3, #1
 8003100:	1852      	adds	r2, r2, r1
 8003102:	e7f1      	b.n	80030e8 <_svfiprintf_r+0x194>
 8003104:	ab07      	add	r3, sp, #28
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	003a      	movs	r2, r7
 800310a:	0021      	movs	r1, r4
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <_svfiprintf_r+0x1fc>)
 800310e:	9803      	ldr	r0, [sp, #12]
 8003110:	e000      	b.n	8003114 <_svfiprintf_r+0x1c0>
 8003112:	bf00      	nop
 8003114:	9004      	str	r0, [sp, #16]
 8003116:	9b04      	ldr	r3, [sp, #16]
 8003118:	3301      	adds	r3, #1
 800311a:	d1d3      	bne.n	80030c4 <_svfiprintf_r+0x170>
 800311c:	89bb      	ldrh	r3, [r7, #12]
 800311e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003120:	065b      	lsls	r3, r3, #25
 8003122:	d400      	bmi.n	8003126 <_svfiprintf_r+0x1d2>
 8003124:	e72d      	b.n	8002f82 <_svfiprintf_r+0x2e>
 8003126:	2001      	movs	r0, #1
 8003128:	4240      	negs	r0, r0
 800312a:	e72a      	b.n	8002f82 <_svfiprintf_r+0x2e>
 800312c:	ab07      	add	r3, sp, #28
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	003a      	movs	r2, r7
 8003132:	0021      	movs	r1, r4
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <_svfiprintf_r+0x1fc>)
 8003136:	9803      	ldr	r0, [sp, #12]
 8003138:	f000 f87c 	bl	8003234 <_printf_i>
 800313c:	e7ea      	b.n	8003114 <_svfiprintf_r+0x1c0>
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	08003810 	.word	0x08003810
 8003144:	08003816 	.word	0x08003816
 8003148:	0800381a 	.word	0x0800381a
 800314c:	00000000 	.word	0x00000000
 8003150:	08002e91 	.word	0x08002e91

08003154 <_printf_common>:
 8003154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003156:	0015      	movs	r5, r2
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	688a      	ldr	r2, [r1, #8]
 800315c:	690b      	ldr	r3, [r1, #16]
 800315e:	000c      	movs	r4, r1
 8003160:	9000      	str	r0, [sp, #0]
 8003162:	4293      	cmp	r3, r2
 8003164:	da00      	bge.n	8003168 <_printf_common+0x14>
 8003166:	0013      	movs	r3, r2
 8003168:	0022      	movs	r2, r4
 800316a:	602b      	str	r3, [r5, #0]
 800316c:	3243      	adds	r2, #67	; 0x43
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	2a00      	cmp	r2, #0
 8003172:	d001      	beq.n	8003178 <_printf_common+0x24>
 8003174:	3301      	adds	r3, #1
 8003176:	602b      	str	r3, [r5, #0]
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	069b      	lsls	r3, r3, #26
 800317c:	d502      	bpl.n	8003184 <_printf_common+0x30>
 800317e:	682b      	ldr	r3, [r5, #0]
 8003180:	3302      	adds	r3, #2
 8003182:	602b      	str	r3, [r5, #0]
 8003184:	6822      	ldr	r2, [r4, #0]
 8003186:	2306      	movs	r3, #6
 8003188:	0017      	movs	r7, r2
 800318a:	401f      	ands	r7, r3
 800318c:	421a      	tst	r2, r3
 800318e:	d027      	beq.n	80031e0 <_printf_common+0x8c>
 8003190:	0023      	movs	r3, r4
 8003192:	3343      	adds	r3, #67	; 0x43
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	1e5a      	subs	r2, r3, #1
 8003198:	4193      	sbcs	r3, r2
 800319a:	6822      	ldr	r2, [r4, #0]
 800319c:	0692      	lsls	r2, r2, #26
 800319e:	d430      	bmi.n	8003202 <_printf_common+0xae>
 80031a0:	0022      	movs	r2, r4
 80031a2:	9901      	ldr	r1, [sp, #4]
 80031a4:	9800      	ldr	r0, [sp, #0]
 80031a6:	9e08      	ldr	r6, [sp, #32]
 80031a8:	3243      	adds	r2, #67	; 0x43
 80031aa:	47b0      	blx	r6
 80031ac:	1c43      	adds	r3, r0, #1
 80031ae:	d025      	beq.n	80031fc <_printf_common+0xa8>
 80031b0:	2306      	movs	r3, #6
 80031b2:	6820      	ldr	r0, [r4, #0]
 80031b4:	682a      	ldr	r2, [r5, #0]
 80031b6:	68e1      	ldr	r1, [r4, #12]
 80031b8:	2500      	movs	r5, #0
 80031ba:	4003      	ands	r3, r0
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d103      	bne.n	80031c8 <_printf_common+0x74>
 80031c0:	1a8d      	subs	r5, r1, r2
 80031c2:	43eb      	mvns	r3, r5
 80031c4:	17db      	asrs	r3, r3, #31
 80031c6:	401d      	ands	r5, r3
 80031c8:	68a3      	ldr	r3, [r4, #8]
 80031ca:	6922      	ldr	r2, [r4, #16]
 80031cc:	4293      	cmp	r3, r2
 80031ce:	dd01      	ble.n	80031d4 <_printf_common+0x80>
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	18ed      	adds	r5, r5, r3
 80031d4:	2700      	movs	r7, #0
 80031d6:	42bd      	cmp	r5, r7
 80031d8:	d120      	bne.n	800321c <_printf_common+0xc8>
 80031da:	2000      	movs	r0, #0
 80031dc:	e010      	b.n	8003200 <_printf_common+0xac>
 80031de:	3701      	adds	r7, #1
 80031e0:	68e3      	ldr	r3, [r4, #12]
 80031e2:	682a      	ldr	r2, [r5, #0]
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	42bb      	cmp	r3, r7
 80031e8:	ddd2      	ble.n	8003190 <_printf_common+0x3c>
 80031ea:	0022      	movs	r2, r4
 80031ec:	2301      	movs	r3, #1
 80031ee:	9901      	ldr	r1, [sp, #4]
 80031f0:	9800      	ldr	r0, [sp, #0]
 80031f2:	9e08      	ldr	r6, [sp, #32]
 80031f4:	3219      	adds	r2, #25
 80031f6:	47b0      	blx	r6
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d1f0      	bne.n	80031de <_printf_common+0x8a>
 80031fc:	2001      	movs	r0, #1
 80031fe:	4240      	negs	r0, r0
 8003200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003202:	2030      	movs	r0, #48	; 0x30
 8003204:	18e1      	adds	r1, r4, r3
 8003206:	3143      	adds	r1, #67	; 0x43
 8003208:	7008      	strb	r0, [r1, #0]
 800320a:	0021      	movs	r1, r4
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	3145      	adds	r1, #69	; 0x45
 8003210:	7809      	ldrb	r1, [r1, #0]
 8003212:	18a2      	adds	r2, r4, r2
 8003214:	3243      	adds	r2, #67	; 0x43
 8003216:	3302      	adds	r3, #2
 8003218:	7011      	strb	r1, [r2, #0]
 800321a:	e7c1      	b.n	80031a0 <_printf_common+0x4c>
 800321c:	0022      	movs	r2, r4
 800321e:	2301      	movs	r3, #1
 8003220:	9901      	ldr	r1, [sp, #4]
 8003222:	9800      	ldr	r0, [sp, #0]
 8003224:	9e08      	ldr	r6, [sp, #32]
 8003226:	321a      	adds	r2, #26
 8003228:	47b0      	blx	r6
 800322a:	1c43      	adds	r3, r0, #1
 800322c:	d0e6      	beq.n	80031fc <_printf_common+0xa8>
 800322e:	3701      	adds	r7, #1
 8003230:	e7d1      	b.n	80031d6 <_printf_common+0x82>
	...

08003234 <_printf_i>:
 8003234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003236:	b08b      	sub	sp, #44	; 0x2c
 8003238:	9206      	str	r2, [sp, #24]
 800323a:	000a      	movs	r2, r1
 800323c:	3243      	adds	r2, #67	; 0x43
 800323e:	9307      	str	r3, [sp, #28]
 8003240:	9005      	str	r0, [sp, #20]
 8003242:	9204      	str	r2, [sp, #16]
 8003244:	7e0a      	ldrb	r2, [r1, #24]
 8003246:	000c      	movs	r4, r1
 8003248:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800324a:	2a78      	cmp	r2, #120	; 0x78
 800324c:	d807      	bhi.n	800325e <_printf_i+0x2a>
 800324e:	2a62      	cmp	r2, #98	; 0x62
 8003250:	d809      	bhi.n	8003266 <_printf_i+0x32>
 8003252:	2a00      	cmp	r2, #0
 8003254:	d100      	bne.n	8003258 <_printf_i+0x24>
 8003256:	e0c1      	b.n	80033dc <_printf_i+0x1a8>
 8003258:	2a58      	cmp	r2, #88	; 0x58
 800325a:	d100      	bne.n	800325e <_printf_i+0x2a>
 800325c:	e08c      	b.n	8003378 <_printf_i+0x144>
 800325e:	0026      	movs	r6, r4
 8003260:	3642      	adds	r6, #66	; 0x42
 8003262:	7032      	strb	r2, [r6, #0]
 8003264:	e022      	b.n	80032ac <_printf_i+0x78>
 8003266:	0010      	movs	r0, r2
 8003268:	3863      	subs	r0, #99	; 0x63
 800326a:	2815      	cmp	r0, #21
 800326c:	d8f7      	bhi.n	800325e <_printf_i+0x2a>
 800326e:	f7fc ff51 	bl	8000114 <__gnu_thumb1_case_shi>
 8003272:	0016      	.short	0x0016
 8003274:	fff6001f 	.word	0xfff6001f
 8003278:	fff6fff6 	.word	0xfff6fff6
 800327c:	001ffff6 	.word	0x001ffff6
 8003280:	fff6fff6 	.word	0xfff6fff6
 8003284:	fff6fff6 	.word	0xfff6fff6
 8003288:	003600a8 	.word	0x003600a8
 800328c:	fff6009a 	.word	0xfff6009a
 8003290:	00b9fff6 	.word	0x00b9fff6
 8003294:	0036fff6 	.word	0x0036fff6
 8003298:	fff6fff6 	.word	0xfff6fff6
 800329c:	009e      	.short	0x009e
 800329e:	0026      	movs	r6, r4
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	3642      	adds	r6, #66	; 0x42
 80032a4:	1d11      	adds	r1, r2, #4
 80032a6:	6019      	str	r1, [r3, #0]
 80032a8:	6813      	ldr	r3, [r2, #0]
 80032aa:	7033      	strb	r3, [r6, #0]
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0a7      	b.n	8003400 <_printf_i+0x1cc>
 80032b0:	6808      	ldr	r0, [r1, #0]
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	1d0a      	adds	r2, r1, #4
 80032b6:	0605      	lsls	r5, r0, #24
 80032b8:	d50b      	bpl.n	80032d2 <_printf_i+0x9e>
 80032ba:	680d      	ldr	r5, [r1, #0]
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	2d00      	cmp	r5, #0
 80032c0:	da03      	bge.n	80032ca <_printf_i+0x96>
 80032c2:	232d      	movs	r3, #45	; 0x2d
 80032c4:	9a04      	ldr	r2, [sp, #16]
 80032c6:	426d      	negs	r5, r5
 80032c8:	7013      	strb	r3, [r2, #0]
 80032ca:	4b61      	ldr	r3, [pc, #388]	; (8003450 <_printf_i+0x21c>)
 80032cc:	270a      	movs	r7, #10
 80032ce:	9303      	str	r3, [sp, #12]
 80032d0:	e01b      	b.n	800330a <_printf_i+0xd6>
 80032d2:	680d      	ldr	r5, [r1, #0]
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	0641      	lsls	r1, r0, #25
 80032d8:	d5f1      	bpl.n	80032be <_printf_i+0x8a>
 80032da:	b22d      	sxth	r5, r5
 80032dc:	e7ef      	b.n	80032be <_printf_i+0x8a>
 80032de:	680d      	ldr	r5, [r1, #0]
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	1d08      	adds	r0, r1, #4
 80032e4:	6018      	str	r0, [r3, #0]
 80032e6:	062e      	lsls	r6, r5, #24
 80032e8:	d501      	bpl.n	80032ee <_printf_i+0xba>
 80032ea:	680d      	ldr	r5, [r1, #0]
 80032ec:	e003      	b.n	80032f6 <_printf_i+0xc2>
 80032ee:	066d      	lsls	r5, r5, #25
 80032f0:	d5fb      	bpl.n	80032ea <_printf_i+0xb6>
 80032f2:	680d      	ldr	r5, [r1, #0]
 80032f4:	b2ad      	uxth	r5, r5
 80032f6:	4b56      	ldr	r3, [pc, #344]	; (8003450 <_printf_i+0x21c>)
 80032f8:	2708      	movs	r7, #8
 80032fa:	9303      	str	r3, [sp, #12]
 80032fc:	2a6f      	cmp	r2, #111	; 0x6f
 80032fe:	d000      	beq.n	8003302 <_printf_i+0xce>
 8003300:	3702      	adds	r7, #2
 8003302:	0023      	movs	r3, r4
 8003304:	2200      	movs	r2, #0
 8003306:	3343      	adds	r3, #67	; 0x43
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	6863      	ldr	r3, [r4, #4]
 800330c:	60a3      	str	r3, [r4, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	db03      	blt.n	800331a <_printf_i+0xe6>
 8003312:	2204      	movs	r2, #4
 8003314:	6821      	ldr	r1, [r4, #0]
 8003316:	4391      	bics	r1, r2
 8003318:	6021      	str	r1, [r4, #0]
 800331a:	2d00      	cmp	r5, #0
 800331c:	d102      	bne.n	8003324 <_printf_i+0xf0>
 800331e:	9e04      	ldr	r6, [sp, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00c      	beq.n	800333e <_printf_i+0x10a>
 8003324:	9e04      	ldr	r6, [sp, #16]
 8003326:	0028      	movs	r0, r5
 8003328:	0039      	movs	r1, r7
 800332a:	f7fc ff83 	bl	8000234 <__aeabi_uidivmod>
 800332e:	9b03      	ldr	r3, [sp, #12]
 8003330:	3e01      	subs	r6, #1
 8003332:	5c5b      	ldrb	r3, [r3, r1]
 8003334:	7033      	strb	r3, [r6, #0]
 8003336:	002b      	movs	r3, r5
 8003338:	0005      	movs	r5, r0
 800333a:	429f      	cmp	r7, r3
 800333c:	d9f3      	bls.n	8003326 <_printf_i+0xf2>
 800333e:	2f08      	cmp	r7, #8
 8003340:	d109      	bne.n	8003356 <_printf_i+0x122>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	07db      	lsls	r3, r3, #31
 8003346:	d506      	bpl.n	8003356 <_printf_i+0x122>
 8003348:	6863      	ldr	r3, [r4, #4]
 800334a:	6922      	ldr	r2, [r4, #16]
 800334c:	4293      	cmp	r3, r2
 800334e:	dc02      	bgt.n	8003356 <_printf_i+0x122>
 8003350:	2330      	movs	r3, #48	; 0x30
 8003352:	3e01      	subs	r6, #1
 8003354:	7033      	strb	r3, [r6, #0]
 8003356:	9b04      	ldr	r3, [sp, #16]
 8003358:	1b9b      	subs	r3, r3, r6
 800335a:	6123      	str	r3, [r4, #16]
 800335c:	9b07      	ldr	r3, [sp, #28]
 800335e:	0021      	movs	r1, r4
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	9805      	ldr	r0, [sp, #20]
 8003364:	9b06      	ldr	r3, [sp, #24]
 8003366:	aa09      	add	r2, sp, #36	; 0x24
 8003368:	f7ff fef4 	bl	8003154 <_printf_common>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d14c      	bne.n	800340a <_printf_i+0x1d6>
 8003370:	2001      	movs	r0, #1
 8003372:	4240      	negs	r0, r0
 8003374:	b00b      	add	sp, #44	; 0x2c
 8003376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003378:	3145      	adds	r1, #69	; 0x45
 800337a:	700a      	strb	r2, [r1, #0]
 800337c:	4a34      	ldr	r2, [pc, #208]	; (8003450 <_printf_i+0x21c>)
 800337e:	9203      	str	r2, [sp, #12]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	6821      	ldr	r1, [r4, #0]
 8003384:	ca20      	ldmia	r2!, {r5}
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	0608      	lsls	r0, r1, #24
 800338a:	d516      	bpl.n	80033ba <_printf_i+0x186>
 800338c:	07cb      	lsls	r3, r1, #31
 800338e:	d502      	bpl.n	8003396 <_printf_i+0x162>
 8003390:	2320      	movs	r3, #32
 8003392:	4319      	orrs	r1, r3
 8003394:	6021      	str	r1, [r4, #0]
 8003396:	2710      	movs	r7, #16
 8003398:	2d00      	cmp	r5, #0
 800339a:	d1b2      	bne.n	8003302 <_printf_i+0xce>
 800339c:	2320      	movs	r3, #32
 800339e:	6822      	ldr	r2, [r4, #0]
 80033a0:	439a      	bics	r2, r3
 80033a2:	6022      	str	r2, [r4, #0]
 80033a4:	e7ad      	b.n	8003302 <_printf_i+0xce>
 80033a6:	2220      	movs	r2, #32
 80033a8:	6809      	ldr	r1, [r1, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	6022      	str	r2, [r4, #0]
 80033ae:	0022      	movs	r2, r4
 80033b0:	2178      	movs	r1, #120	; 0x78
 80033b2:	3245      	adds	r2, #69	; 0x45
 80033b4:	7011      	strb	r1, [r2, #0]
 80033b6:	4a27      	ldr	r2, [pc, #156]	; (8003454 <_printf_i+0x220>)
 80033b8:	e7e1      	b.n	800337e <_printf_i+0x14a>
 80033ba:	0648      	lsls	r0, r1, #25
 80033bc:	d5e6      	bpl.n	800338c <_printf_i+0x158>
 80033be:	b2ad      	uxth	r5, r5
 80033c0:	e7e4      	b.n	800338c <_printf_i+0x158>
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	680d      	ldr	r5, [r1, #0]
 80033c6:	1d10      	adds	r0, r2, #4
 80033c8:	6949      	ldr	r1, [r1, #20]
 80033ca:	6018      	str	r0, [r3, #0]
 80033cc:	6813      	ldr	r3, [r2, #0]
 80033ce:	062e      	lsls	r6, r5, #24
 80033d0:	d501      	bpl.n	80033d6 <_printf_i+0x1a2>
 80033d2:	6019      	str	r1, [r3, #0]
 80033d4:	e002      	b.n	80033dc <_printf_i+0x1a8>
 80033d6:	066d      	lsls	r5, r5, #25
 80033d8:	d5fb      	bpl.n	80033d2 <_printf_i+0x19e>
 80033da:	8019      	strh	r1, [r3, #0]
 80033dc:	2300      	movs	r3, #0
 80033de:	9e04      	ldr	r6, [sp, #16]
 80033e0:	6123      	str	r3, [r4, #16]
 80033e2:	e7bb      	b.n	800335c <_printf_i+0x128>
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	1d11      	adds	r1, r2, #4
 80033e8:	6019      	str	r1, [r3, #0]
 80033ea:	6816      	ldr	r6, [r2, #0]
 80033ec:	2100      	movs	r1, #0
 80033ee:	0030      	movs	r0, r6
 80033f0:	6862      	ldr	r2, [r4, #4]
 80033f2:	f000 f831 	bl	8003458 <memchr>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d001      	beq.n	80033fe <_printf_i+0x1ca>
 80033fa:	1b80      	subs	r0, r0, r6
 80033fc:	6060      	str	r0, [r4, #4]
 80033fe:	6863      	ldr	r3, [r4, #4]
 8003400:	6123      	str	r3, [r4, #16]
 8003402:	2300      	movs	r3, #0
 8003404:	9a04      	ldr	r2, [sp, #16]
 8003406:	7013      	strb	r3, [r2, #0]
 8003408:	e7a8      	b.n	800335c <_printf_i+0x128>
 800340a:	6923      	ldr	r3, [r4, #16]
 800340c:	0032      	movs	r2, r6
 800340e:	9906      	ldr	r1, [sp, #24]
 8003410:	9805      	ldr	r0, [sp, #20]
 8003412:	9d07      	ldr	r5, [sp, #28]
 8003414:	47a8      	blx	r5
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	d0aa      	beq.n	8003370 <_printf_i+0x13c>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	079b      	lsls	r3, r3, #30
 800341e:	d415      	bmi.n	800344c <_printf_i+0x218>
 8003420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003422:	68e0      	ldr	r0, [r4, #12]
 8003424:	4298      	cmp	r0, r3
 8003426:	daa5      	bge.n	8003374 <_printf_i+0x140>
 8003428:	0018      	movs	r0, r3
 800342a:	e7a3      	b.n	8003374 <_printf_i+0x140>
 800342c:	0022      	movs	r2, r4
 800342e:	2301      	movs	r3, #1
 8003430:	9906      	ldr	r1, [sp, #24]
 8003432:	9805      	ldr	r0, [sp, #20]
 8003434:	9e07      	ldr	r6, [sp, #28]
 8003436:	3219      	adds	r2, #25
 8003438:	47b0      	blx	r6
 800343a:	1c43      	adds	r3, r0, #1
 800343c:	d098      	beq.n	8003370 <_printf_i+0x13c>
 800343e:	3501      	adds	r5, #1
 8003440:	68e3      	ldr	r3, [r4, #12]
 8003442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	42ab      	cmp	r3, r5
 8003448:	dcf0      	bgt.n	800342c <_printf_i+0x1f8>
 800344a:	e7e9      	b.n	8003420 <_printf_i+0x1ec>
 800344c:	2500      	movs	r5, #0
 800344e:	e7f7      	b.n	8003440 <_printf_i+0x20c>
 8003450:	08003821 	.word	0x08003821
 8003454:	08003832 	.word	0x08003832

08003458 <memchr>:
 8003458:	b2c9      	uxtb	r1, r1
 800345a:	1882      	adds	r2, r0, r2
 800345c:	4290      	cmp	r0, r2
 800345e:	d101      	bne.n	8003464 <memchr+0xc>
 8003460:	2000      	movs	r0, #0
 8003462:	4770      	bx	lr
 8003464:	7803      	ldrb	r3, [r0, #0]
 8003466:	428b      	cmp	r3, r1
 8003468:	d0fb      	beq.n	8003462 <memchr+0xa>
 800346a:	3001      	adds	r0, #1
 800346c:	e7f6      	b.n	800345c <memchr+0x4>

0800346e <memcpy>:
 800346e:	2300      	movs	r3, #0
 8003470:	b510      	push	{r4, lr}
 8003472:	429a      	cmp	r2, r3
 8003474:	d100      	bne.n	8003478 <memcpy+0xa>
 8003476:	bd10      	pop	{r4, pc}
 8003478:	5ccc      	ldrb	r4, [r1, r3]
 800347a:	54c4      	strb	r4, [r0, r3]
 800347c:	3301      	adds	r3, #1
 800347e:	e7f8      	b.n	8003472 <memcpy+0x4>

08003480 <memmove>:
 8003480:	b510      	push	{r4, lr}
 8003482:	4288      	cmp	r0, r1
 8003484:	d902      	bls.n	800348c <memmove+0xc>
 8003486:	188b      	adds	r3, r1, r2
 8003488:	4298      	cmp	r0, r3
 800348a:	d303      	bcc.n	8003494 <memmove+0x14>
 800348c:	2300      	movs	r3, #0
 800348e:	e007      	b.n	80034a0 <memmove+0x20>
 8003490:	5c8b      	ldrb	r3, [r1, r2]
 8003492:	5483      	strb	r3, [r0, r2]
 8003494:	3a01      	subs	r2, #1
 8003496:	d2fb      	bcs.n	8003490 <memmove+0x10>
 8003498:	bd10      	pop	{r4, pc}
 800349a:	5ccc      	ldrb	r4, [r1, r3]
 800349c:	54c4      	strb	r4, [r0, r3]
 800349e:	3301      	adds	r3, #1
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1fa      	bne.n	800349a <memmove+0x1a>
 80034a4:	e7f8      	b.n	8003498 <memmove+0x18>
	...

080034a8 <_free_r>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	0005      	movs	r5, r0
 80034ac:	2900      	cmp	r1, #0
 80034ae:	d010      	beq.n	80034d2 <_free_r+0x2a>
 80034b0:	1f0c      	subs	r4, r1, #4
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	da00      	bge.n	80034ba <_free_r+0x12>
 80034b8:	18e4      	adds	r4, r4, r3
 80034ba:	0028      	movs	r0, r5
 80034bc:	f000 f918 	bl	80036f0 <__malloc_lock>
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <_free_r+0x90>)
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <_free_r+0x2c>
 80034c8:	6063      	str	r3, [r4, #4]
 80034ca:	6014      	str	r4, [r2, #0]
 80034cc:	0028      	movs	r0, r5
 80034ce:	f000 f917 	bl	8003700 <__malloc_unlock>
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	42a3      	cmp	r3, r4
 80034d6:	d908      	bls.n	80034ea <_free_r+0x42>
 80034d8:	6821      	ldr	r1, [r4, #0]
 80034da:	1860      	adds	r0, r4, r1
 80034dc:	4283      	cmp	r3, r0
 80034de:	d1f3      	bne.n	80034c8 <_free_r+0x20>
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	1841      	adds	r1, r0, r1
 80034e6:	6021      	str	r1, [r4, #0]
 80034e8:	e7ee      	b.n	80034c8 <_free_r+0x20>
 80034ea:	001a      	movs	r2, r3
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <_free_r+0x4e>
 80034f2:	42a3      	cmp	r3, r4
 80034f4:	d9f9      	bls.n	80034ea <_free_r+0x42>
 80034f6:	6811      	ldr	r1, [r2, #0]
 80034f8:	1850      	adds	r0, r2, r1
 80034fa:	42a0      	cmp	r0, r4
 80034fc:	d10b      	bne.n	8003516 <_free_r+0x6e>
 80034fe:	6820      	ldr	r0, [r4, #0]
 8003500:	1809      	adds	r1, r1, r0
 8003502:	1850      	adds	r0, r2, r1
 8003504:	6011      	str	r1, [r2, #0]
 8003506:	4283      	cmp	r3, r0
 8003508:	d1e0      	bne.n	80034cc <_free_r+0x24>
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	1841      	adds	r1, r0, r1
 8003510:	6011      	str	r1, [r2, #0]
 8003512:	6053      	str	r3, [r2, #4]
 8003514:	e7da      	b.n	80034cc <_free_r+0x24>
 8003516:	42a0      	cmp	r0, r4
 8003518:	d902      	bls.n	8003520 <_free_r+0x78>
 800351a:	230c      	movs	r3, #12
 800351c:	602b      	str	r3, [r5, #0]
 800351e:	e7d5      	b.n	80034cc <_free_r+0x24>
 8003520:	6821      	ldr	r1, [r4, #0]
 8003522:	1860      	adds	r0, r4, r1
 8003524:	4283      	cmp	r3, r0
 8003526:	d103      	bne.n	8003530 <_free_r+0x88>
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	1841      	adds	r1, r0, r1
 800352e:	6021      	str	r1, [r4, #0]
 8003530:	6063      	str	r3, [r4, #4]
 8003532:	6054      	str	r4, [r2, #4]
 8003534:	e7ca      	b.n	80034cc <_free_r+0x24>
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	200001e0 	.word	0x200001e0

0800353c <sbrk_aligned>:
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	4e0f      	ldr	r6, [pc, #60]	; (800357c <sbrk_aligned+0x40>)
 8003540:	000d      	movs	r5, r1
 8003542:	6831      	ldr	r1, [r6, #0]
 8003544:	0004      	movs	r4, r0
 8003546:	2900      	cmp	r1, #0
 8003548:	d102      	bne.n	8003550 <sbrk_aligned+0x14>
 800354a:	f000 f8bf 	bl	80036cc <_sbrk_r>
 800354e:	6030      	str	r0, [r6, #0]
 8003550:	0029      	movs	r1, r5
 8003552:	0020      	movs	r0, r4
 8003554:	f000 f8ba 	bl	80036cc <_sbrk_r>
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	d00a      	beq.n	8003572 <sbrk_aligned+0x36>
 800355c:	2303      	movs	r3, #3
 800355e:	1cc5      	adds	r5, r0, #3
 8003560:	439d      	bics	r5, r3
 8003562:	42a8      	cmp	r0, r5
 8003564:	d007      	beq.n	8003576 <sbrk_aligned+0x3a>
 8003566:	1a29      	subs	r1, r5, r0
 8003568:	0020      	movs	r0, r4
 800356a:	f000 f8af 	bl	80036cc <_sbrk_r>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	d101      	bne.n	8003576 <sbrk_aligned+0x3a>
 8003572:	2501      	movs	r5, #1
 8003574:	426d      	negs	r5, r5
 8003576:	0028      	movs	r0, r5
 8003578:	bd70      	pop	{r4, r5, r6, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	200001e4 	.word	0x200001e4

08003580 <_malloc_r>:
 8003580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003582:	2203      	movs	r2, #3
 8003584:	1ccb      	adds	r3, r1, #3
 8003586:	4393      	bics	r3, r2
 8003588:	3308      	adds	r3, #8
 800358a:	0006      	movs	r6, r0
 800358c:	001f      	movs	r7, r3
 800358e:	2b0c      	cmp	r3, #12
 8003590:	d232      	bcs.n	80035f8 <_malloc_r+0x78>
 8003592:	270c      	movs	r7, #12
 8003594:	42b9      	cmp	r1, r7
 8003596:	d831      	bhi.n	80035fc <_malloc_r+0x7c>
 8003598:	0030      	movs	r0, r6
 800359a:	f000 f8a9 	bl	80036f0 <__malloc_lock>
 800359e:	4d32      	ldr	r5, [pc, #200]	; (8003668 <_malloc_r+0xe8>)
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	001c      	movs	r4, r3
 80035a4:	2c00      	cmp	r4, #0
 80035a6:	d12e      	bne.n	8003606 <_malloc_r+0x86>
 80035a8:	0039      	movs	r1, r7
 80035aa:	0030      	movs	r0, r6
 80035ac:	f7ff ffc6 	bl	800353c <sbrk_aligned>
 80035b0:	0004      	movs	r4, r0
 80035b2:	1c43      	adds	r3, r0, #1
 80035b4:	d11e      	bne.n	80035f4 <_malloc_r+0x74>
 80035b6:	682c      	ldr	r4, [r5, #0]
 80035b8:	0025      	movs	r5, r4
 80035ba:	2d00      	cmp	r5, #0
 80035bc:	d14a      	bne.n	8003654 <_malloc_r+0xd4>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	0029      	movs	r1, r5
 80035c2:	18e3      	adds	r3, r4, r3
 80035c4:	0030      	movs	r0, r6
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	f000 f880 	bl	80036cc <_sbrk_r>
 80035cc:	9b01      	ldr	r3, [sp, #4]
 80035ce:	4283      	cmp	r3, r0
 80035d0:	d143      	bne.n	800365a <_malloc_r+0xda>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	3703      	adds	r7, #3
 80035d6:	1aff      	subs	r7, r7, r3
 80035d8:	2303      	movs	r3, #3
 80035da:	439f      	bics	r7, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	2f0c      	cmp	r7, #12
 80035e0:	d200      	bcs.n	80035e4 <_malloc_r+0x64>
 80035e2:	270c      	movs	r7, #12
 80035e4:	0039      	movs	r1, r7
 80035e6:	0030      	movs	r0, r6
 80035e8:	f7ff ffa8 	bl	800353c <sbrk_aligned>
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d034      	beq.n	800365a <_malloc_r+0xda>
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	19df      	adds	r7, r3, r7
 80035f4:	6027      	str	r7, [r4, #0]
 80035f6:	e013      	b.n	8003620 <_malloc_r+0xa0>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	dacb      	bge.n	8003594 <_malloc_r+0x14>
 80035fc:	230c      	movs	r3, #12
 80035fe:	2500      	movs	r5, #0
 8003600:	6033      	str	r3, [r6, #0]
 8003602:	0028      	movs	r0, r5
 8003604:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	1bd1      	subs	r1, r2, r7
 800360a:	d420      	bmi.n	800364e <_malloc_r+0xce>
 800360c:	290b      	cmp	r1, #11
 800360e:	d917      	bls.n	8003640 <_malloc_r+0xc0>
 8003610:	19e2      	adds	r2, r4, r7
 8003612:	6027      	str	r7, [r4, #0]
 8003614:	42a3      	cmp	r3, r4
 8003616:	d111      	bne.n	800363c <_malloc_r+0xbc>
 8003618:	602a      	str	r2, [r5, #0]
 800361a:	6863      	ldr	r3, [r4, #4]
 800361c:	6011      	str	r1, [r2, #0]
 800361e:	6053      	str	r3, [r2, #4]
 8003620:	0030      	movs	r0, r6
 8003622:	0025      	movs	r5, r4
 8003624:	f000 f86c 	bl	8003700 <__malloc_unlock>
 8003628:	2207      	movs	r2, #7
 800362a:	350b      	adds	r5, #11
 800362c:	1d23      	adds	r3, r4, #4
 800362e:	4395      	bics	r5, r2
 8003630:	1aea      	subs	r2, r5, r3
 8003632:	429d      	cmp	r5, r3
 8003634:	d0e5      	beq.n	8003602 <_malloc_r+0x82>
 8003636:	1b5b      	subs	r3, r3, r5
 8003638:	50a3      	str	r3, [r4, r2]
 800363a:	e7e2      	b.n	8003602 <_malloc_r+0x82>
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	e7ec      	b.n	800361a <_malloc_r+0x9a>
 8003640:	6862      	ldr	r2, [r4, #4]
 8003642:	42a3      	cmp	r3, r4
 8003644:	d101      	bne.n	800364a <_malloc_r+0xca>
 8003646:	602a      	str	r2, [r5, #0]
 8003648:	e7ea      	b.n	8003620 <_malloc_r+0xa0>
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	e7e8      	b.n	8003620 <_malloc_r+0xa0>
 800364e:	0023      	movs	r3, r4
 8003650:	6864      	ldr	r4, [r4, #4]
 8003652:	e7a7      	b.n	80035a4 <_malloc_r+0x24>
 8003654:	002c      	movs	r4, r5
 8003656:	686d      	ldr	r5, [r5, #4]
 8003658:	e7af      	b.n	80035ba <_malloc_r+0x3a>
 800365a:	230c      	movs	r3, #12
 800365c:	0030      	movs	r0, r6
 800365e:	6033      	str	r3, [r6, #0]
 8003660:	f000 f84e 	bl	8003700 <__malloc_unlock>
 8003664:	e7cd      	b.n	8003602 <_malloc_r+0x82>
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	200001e0 	.word	0x200001e0

0800366c <_realloc_r>:
 800366c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800366e:	0007      	movs	r7, r0
 8003670:	000e      	movs	r6, r1
 8003672:	0014      	movs	r4, r2
 8003674:	2900      	cmp	r1, #0
 8003676:	d105      	bne.n	8003684 <_realloc_r+0x18>
 8003678:	0011      	movs	r1, r2
 800367a:	f7ff ff81 	bl	8003580 <_malloc_r>
 800367e:	0005      	movs	r5, r0
 8003680:	0028      	movs	r0, r5
 8003682:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003684:	2a00      	cmp	r2, #0
 8003686:	d103      	bne.n	8003690 <_realloc_r+0x24>
 8003688:	f7ff ff0e 	bl	80034a8 <_free_r>
 800368c:	0025      	movs	r5, r4
 800368e:	e7f7      	b.n	8003680 <_realloc_r+0x14>
 8003690:	f000 f83e 	bl	8003710 <_malloc_usable_size_r>
 8003694:	9001      	str	r0, [sp, #4]
 8003696:	4284      	cmp	r4, r0
 8003698:	d803      	bhi.n	80036a2 <_realloc_r+0x36>
 800369a:	0035      	movs	r5, r6
 800369c:	0843      	lsrs	r3, r0, #1
 800369e:	42a3      	cmp	r3, r4
 80036a0:	d3ee      	bcc.n	8003680 <_realloc_r+0x14>
 80036a2:	0021      	movs	r1, r4
 80036a4:	0038      	movs	r0, r7
 80036a6:	f7ff ff6b 	bl	8003580 <_malloc_r>
 80036aa:	1e05      	subs	r5, r0, #0
 80036ac:	d0e8      	beq.n	8003680 <_realloc_r+0x14>
 80036ae:	9b01      	ldr	r3, [sp, #4]
 80036b0:	0022      	movs	r2, r4
 80036b2:	429c      	cmp	r4, r3
 80036b4:	d900      	bls.n	80036b8 <_realloc_r+0x4c>
 80036b6:	001a      	movs	r2, r3
 80036b8:	0031      	movs	r1, r6
 80036ba:	0028      	movs	r0, r5
 80036bc:	f7ff fed7 	bl	800346e <memcpy>
 80036c0:	0031      	movs	r1, r6
 80036c2:	0038      	movs	r0, r7
 80036c4:	f7ff fef0 	bl	80034a8 <_free_r>
 80036c8:	e7da      	b.n	8003680 <_realloc_r+0x14>
	...

080036cc <_sbrk_r>:
 80036cc:	2300      	movs	r3, #0
 80036ce:	b570      	push	{r4, r5, r6, lr}
 80036d0:	4d06      	ldr	r5, [pc, #24]	; (80036ec <_sbrk_r+0x20>)
 80036d2:	0004      	movs	r4, r0
 80036d4:	0008      	movs	r0, r1
 80036d6:	602b      	str	r3, [r5, #0]
 80036d8:	f7fd fab6 	bl	8000c48 <_sbrk>
 80036dc:	1c43      	adds	r3, r0, #1
 80036de:	d103      	bne.n	80036e8 <_sbrk_r+0x1c>
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d000      	beq.n	80036e8 <_sbrk_r+0x1c>
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	200001e8 	.word	0x200001e8

080036f0 <__malloc_lock>:
 80036f0:	b510      	push	{r4, lr}
 80036f2:	4802      	ldr	r0, [pc, #8]	; (80036fc <__malloc_lock+0xc>)
 80036f4:	f000 f814 	bl	8003720 <__retarget_lock_acquire_recursive>
 80036f8:	bd10      	pop	{r4, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	200001ec 	.word	0x200001ec

08003700 <__malloc_unlock>:
 8003700:	b510      	push	{r4, lr}
 8003702:	4802      	ldr	r0, [pc, #8]	; (800370c <__malloc_unlock+0xc>)
 8003704:	f000 f80d 	bl	8003722 <__retarget_lock_release_recursive>
 8003708:	bd10      	pop	{r4, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	200001ec 	.word	0x200001ec

08003710 <_malloc_usable_size_r>:
 8003710:	1f0b      	subs	r3, r1, #4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	1f18      	subs	r0, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	da01      	bge.n	800371e <_malloc_usable_size_r+0xe>
 800371a:	580b      	ldr	r3, [r1, r0]
 800371c:	18c0      	adds	r0, r0, r3
 800371e:	4770      	bx	lr

08003720 <__retarget_lock_acquire_recursive>:
 8003720:	4770      	bx	lr

08003722 <__retarget_lock_release_recursive>:
 8003722:	4770      	bx	lr

08003724 <_init>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr

08003730 <_fini>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr
